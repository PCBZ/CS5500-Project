
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model EventDonorList
 * 
 */
export type EventDonorList = $Result.DefaultSelection<Prisma.$EventDonorListPayload>
/**
 * Model EventDonor
 * 
 */
export type EventDonor = $Result.DefaultSelection<Prisma.$EventDonorPayload>
/**
 * Model Donor
 * 
 */
export type Donor = $Result.DefaultSelection<Prisma.$DonorPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  pmm: 'pmm',
  smm: 'smm',
  vmm: 'vmm'
};

export type Role = (typeof Role)[keyof typeof Role]


export const ReviewStatus: {
  completed: 'completed',
  pending: 'pending'
};

export type ReviewStatus = (typeof ReviewStatus)[keyof typeof ReviewStatus]


export const DonorStatus: {
  Pending: 'Pending',
  Approved: 'Approved',
  Excluded: 'Excluded',
  AutoExcluded: 'AutoExcluded'
};

export type DonorStatus = (typeof DonorStatus)[keyof typeof DonorStatus]


export const EventStatus: {
  Planning: 'Planning',
  ListGeneration: 'ListGeneration',
  Review: 'Review',
  Ready: 'Ready',
  Complete: 'Complete'
};

export type EventStatus = (typeof EventStatus)[keyof typeof EventStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type ReviewStatus = $Enums.ReviewStatus

export const ReviewStatus: typeof $Enums.ReviewStatus

export type DonorStatus = $Enums.DonorStatus

export const DonorStatus: typeof $Enums.DonorStatus

export type EventStatus = $Enums.EventStatus

export const EventStatus: typeof $Enums.EventStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.eventDonorList`: Exposes CRUD operations for the **EventDonorList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventDonorLists
    * const eventDonorLists = await prisma.eventDonorList.findMany()
    * ```
    */
  get eventDonorList(): Prisma.EventDonorListDelegate<ExtArgs>;

  /**
   * `prisma.eventDonor`: Exposes CRUD operations for the **EventDonor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventDonors
    * const eventDonors = await prisma.eventDonor.findMany()
    * ```
    */
  get eventDonor(): Prisma.EventDonorDelegate<ExtArgs>;

  /**
   * `prisma.donor`: Exposes CRUD operations for the **Donor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Donors
    * const donors = await prisma.donor.findMany()
    * ```
    */
  get donor(): Prisma.DonorDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    EventDonorList: 'EventDonorList',
    EventDonor: 'EventDonor',
    Donor: 'Donor',
    Event: 'Event'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "eventDonorList" | "eventDonor" | "donor" | "event"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      EventDonorList: {
        payload: Prisma.$EventDonorListPayload<ExtArgs>
        fields: Prisma.EventDonorListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventDonorListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventDonorListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorListPayload>
          }
          findFirst: {
            args: Prisma.EventDonorListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventDonorListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorListPayload>
          }
          findMany: {
            args: Prisma.EventDonorListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorListPayload>[]
          }
          create: {
            args: Prisma.EventDonorListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorListPayload>
          }
          createMany: {
            args: Prisma.EventDonorListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EventDonorListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorListPayload>
          }
          update: {
            args: Prisma.EventDonorListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorListPayload>
          }
          deleteMany: {
            args: Prisma.EventDonorListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventDonorListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventDonorListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorListPayload>
          }
          aggregate: {
            args: Prisma.EventDonorListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventDonorList>
          }
          groupBy: {
            args: Prisma.EventDonorListGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventDonorListGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventDonorListCountArgs<ExtArgs>
            result: $Utils.Optional<EventDonorListCountAggregateOutputType> | number
          }
        }
      }
      EventDonor: {
        payload: Prisma.$EventDonorPayload<ExtArgs>
        fields: Prisma.EventDonorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventDonorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventDonorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorPayload>
          }
          findFirst: {
            args: Prisma.EventDonorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventDonorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorPayload>
          }
          findMany: {
            args: Prisma.EventDonorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorPayload>[]
          }
          create: {
            args: Prisma.EventDonorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorPayload>
          }
          createMany: {
            args: Prisma.EventDonorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EventDonorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorPayload>
          }
          update: {
            args: Prisma.EventDonorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorPayload>
          }
          deleteMany: {
            args: Prisma.EventDonorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventDonorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventDonorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventDonorPayload>
          }
          aggregate: {
            args: Prisma.EventDonorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventDonor>
          }
          groupBy: {
            args: Prisma.EventDonorGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventDonorGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventDonorCountArgs<ExtArgs>
            result: $Utils.Optional<EventDonorCountAggregateOutputType> | number
          }
        }
      }
      Donor: {
        payload: Prisma.$DonorPayload<ExtArgs>
        fields: Prisma.DonorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DonorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DonorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonorPayload>
          }
          findFirst: {
            args: Prisma.DonorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DonorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonorPayload>
          }
          findMany: {
            args: Prisma.DonorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonorPayload>[]
          }
          create: {
            args: Prisma.DonorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonorPayload>
          }
          createMany: {
            args: Prisma.DonorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DonorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonorPayload>
          }
          update: {
            args: Prisma.DonorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonorPayload>
          }
          deleteMany: {
            args: Prisma.DonorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DonorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DonorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonorPayload>
          }
          aggregate: {
            args: Prisma.DonorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDonor>
          }
          groupBy: {
            args: Prisma.DonorGroupByArgs<ExtArgs>
            result: $Utils.Optional<DonorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DonorCountArgs<ExtArgs>
            result: $Utils.Optional<DonorCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    generatedLists: number
    createdEvents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    generatedLists?: boolean | UserCountOutputTypeCountGeneratedListsArgs
    createdEvents?: boolean | UserCountOutputTypeCountCreatedEventsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGeneratedListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventDonorListWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Count Type EventDonorListCountOutputType
   */

  export type EventDonorListCountOutputType = {
    eventDonors: number
  }

  export type EventDonorListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventDonors?: boolean | EventDonorListCountOutputTypeCountEventDonorsArgs
  }

  // Custom InputTypes
  /**
   * EventDonorListCountOutputType without action
   */
  export type EventDonorListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorListCountOutputType
     */
    select?: EventDonorListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventDonorListCountOutputType without action
   */
  export type EventDonorListCountOutputTypeCountEventDonorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventDonorWhereInput
  }


  /**
   * Count Type DonorCountOutputType
   */

  export type DonorCountOutputType = {
    eventDonors: number
  }

  export type DonorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventDonors?: boolean | DonorCountOutputTypeCountEventDonorsArgs
  }

  // Custom InputTypes
  /**
   * DonorCountOutputType without action
   */
  export type DonorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonorCountOutputType
     */
    select?: DonorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DonorCountOutputType without action
   */
  export type DonorCountOutputTypeCountEventDonorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventDonorWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    donorLists: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    donorLists?: boolean | EventCountOutputTypeCountDonorListsArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountDonorListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventDonorListWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    generatedLists?: boolean | User$generatedListsArgs<ExtArgs>
    createdEvents?: boolean | User$createdEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    generatedLists?: boolean | User$generatedListsArgs<ExtArgs>
    createdEvents?: boolean | User$createdEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      generatedLists: Prisma.$EventDonorListPayload<ExtArgs>[]
      createdEvents: Prisma.$EventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    generatedLists<T extends User$generatedListsArgs<ExtArgs> = {}>(args?: Subset<T, User$generatedListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "findMany"> | Null>
    createdEvents<T extends User$createdEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.generatedLists
   */
  export type User$generatedListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    where?: EventDonorListWhereInput
    orderBy?: EventDonorListOrderByWithRelationInput | EventDonorListOrderByWithRelationInput[]
    cursor?: EventDonorListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventDonorListScalarFieldEnum | EventDonorListScalarFieldEnum[]
  }

  /**
   * User.createdEvents
   */
  export type User$createdEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model EventDonorList
   */

  export type AggregateEventDonorList = {
    _count: EventDonorListCountAggregateOutputType | null
    _avg: EventDonorListAvgAggregateOutputType | null
    _sum: EventDonorListSumAggregateOutputType | null
    _min: EventDonorListMinAggregateOutputType | null
    _max: EventDonorListMaxAggregateOutputType | null
  }

  export type EventDonorListAvgAggregateOutputType = {
    id: number | null
    eventId: number | null
    totalDonors: number | null
    approved: number | null
    excluded: number | null
    pending: number | null
    autoExcluded: number | null
    generatedBy: number | null
  }

  export type EventDonorListSumAggregateOutputType = {
    id: number | null
    eventId: number | null
    totalDonors: number | null
    approved: number | null
    excluded: number | null
    pending: number | null
    autoExcluded: number | null
    generatedBy: number | null
  }

  export type EventDonorListMinAggregateOutputType = {
    id: number | null
    eventId: number | null
    name: string | null
    totalDonors: number | null
    approved: number | null
    excluded: number | null
    pending: number | null
    autoExcluded: number | null
    reviewStatus: $Enums.ReviewStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    generatedBy: number | null
  }

  export type EventDonorListMaxAggregateOutputType = {
    id: number | null
    eventId: number | null
    name: string | null
    totalDonors: number | null
    approved: number | null
    excluded: number | null
    pending: number | null
    autoExcluded: number | null
    reviewStatus: $Enums.ReviewStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    generatedBy: number | null
  }

  export type EventDonorListCountAggregateOutputType = {
    id: number
    eventId: number
    name: number
    totalDonors: number
    approved: number
    excluded: number
    pending: number
    autoExcluded: number
    reviewStatus: number
    createdAt: number
    updatedAt: number
    generatedBy: number
    _all: number
  }


  export type EventDonorListAvgAggregateInputType = {
    id?: true
    eventId?: true
    totalDonors?: true
    approved?: true
    excluded?: true
    pending?: true
    autoExcluded?: true
    generatedBy?: true
  }

  export type EventDonorListSumAggregateInputType = {
    id?: true
    eventId?: true
    totalDonors?: true
    approved?: true
    excluded?: true
    pending?: true
    autoExcluded?: true
    generatedBy?: true
  }

  export type EventDonorListMinAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    totalDonors?: true
    approved?: true
    excluded?: true
    pending?: true
    autoExcluded?: true
    reviewStatus?: true
    createdAt?: true
    updatedAt?: true
    generatedBy?: true
  }

  export type EventDonorListMaxAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    totalDonors?: true
    approved?: true
    excluded?: true
    pending?: true
    autoExcluded?: true
    reviewStatus?: true
    createdAt?: true
    updatedAt?: true
    generatedBy?: true
  }

  export type EventDonorListCountAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    totalDonors?: true
    approved?: true
    excluded?: true
    pending?: true
    autoExcluded?: true
    reviewStatus?: true
    createdAt?: true
    updatedAt?: true
    generatedBy?: true
    _all?: true
  }

  export type EventDonorListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventDonorList to aggregate.
     */
    where?: EventDonorListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventDonorLists to fetch.
     */
    orderBy?: EventDonorListOrderByWithRelationInput | EventDonorListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventDonorListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventDonorLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventDonorLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventDonorLists
    **/
    _count?: true | EventDonorListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventDonorListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventDonorListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventDonorListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventDonorListMaxAggregateInputType
  }

  export type GetEventDonorListAggregateType<T extends EventDonorListAggregateArgs> = {
        [P in keyof T & keyof AggregateEventDonorList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventDonorList[P]>
      : GetScalarType<T[P], AggregateEventDonorList[P]>
  }




  export type EventDonorListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventDonorListWhereInput
    orderBy?: EventDonorListOrderByWithAggregationInput | EventDonorListOrderByWithAggregationInput[]
    by: EventDonorListScalarFieldEnum[] | EventDonorListScalarFieldEnum
    having?: EventDonorListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventDonorListCountAggregateInputType | true
    _avg?: EventDonorListAvgAggregateInputType
    _sum?: EventDonorListSumAggregateInputType
    _min?: EventDonorListMinAggregateInputType
    _max?: EventDonorListMaxAggregateInputType
  }

  export type EventDonorListGroupByOutputType = {
    id: number
    eventId: number
    name: string
    totalDonors: number
    approved: number
    excluded: number
    pending: number
    autoExcluded: number
    reviewStatus: $Enums.ReviewStatus
    createdAt: Date
    updatedAt: Date
    generatedBy: number
    _count: EventDonorListCountAggregateOutputType | null
    _avg: EventDonorListAvgAggregateOutputType | null
    _sum: EventDonorListSumAggregateOutputType | null
    _min: EventDonorListMinAggregateOutputType | null
    _max: EventDonorListMaxAggregateOutputType | null
  }

  type GetEventDonorListGroupByPayload<T extends EventDonorListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventDonorListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventDonorListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventDonorListGroupByOutputType[P]>
            : GetScalarType<T[P], EventDonorListGroupByOutputType[P]>
        }
      >
    >


  export type EventDonorListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    totalDonors?: boolean
    approved?: boolean
    excluded?: boolean
    pending?: boolean
    autoExcluded?: boolean
    reviewStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    generatedBy?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    generator?: boolean | UserDefaultArgs<ExtArgs>
    eventDonors?: boolean | EventDonorList$eventDonorsArgs<ExtArgs>
    _count?: boolean | EventDonorListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventDonorList"]>


  export type EventDonorListSelectScalar = {
    id?: boolean
    eventId?: boolean
    name?: boolean
    totalDonors?: boolean
    approved?: boolean
    excluded?: boolean
    pending?: boolean
    autoExcluded?: boolean
    reviewStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    generatedBy?: boolean
  }

  export type EventDonorListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    generator?: boolean | UserDefaultArgs<ExtArgs>
    eventDonors?: boolean | EventDonorList$eventDonorsArgs<ExtArgs>
    _count?: boolean | EventDonorListCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EventDonorListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventDonorList"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      generator: Prisma.$UserPayload<ExtArgs>
      eventDonors: Prisma.$EventDonorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      eventId: number
      name: string
      totalDonors: number
      approved: number
      excluded: number
      pending: number
      autoExcluded: number
      reviewStatus: $Enums.ReviewStatus
      createdAt: Date
      updatedAt: Date
      generatedBy: number
    }, ExtArgs["result"]["eventDonorList"]>
    composites: {}
  }

  type EventDonorListGetPayload<S extends boolean | null | undefined | EventDonorListDefaultArgs> = $Result.GetResult<Prisma.$EventDonorListPayload, S>

  type EventDonorListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventDonorListFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventDonorListCountAggregateInputType | true
    }

  export interface EventDonorListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventDonorList'], meta: { name: 'EventDonorList' } }
    /**
     * Find zero or one EventDonorList that matches the filter.
     * @param {EventDonorListFindUniqueArgs} args - Arguments to find a EventDonorList
     * @example
     * // Get one EventDonorList
     * const eventDonorList = await prisma.eventDonorList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventDonorListFindUniqueArgs>(args: SelectSubset<T, EventDonorListFindUniqueArgs<ExtArgs>>): Prisma__EventDonorListClient<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventDonorList that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventDonorListFindUniqueOrThrowArgs} args - Arguments to find a EventDonorList
     * @example
     * // Get one EventDonorList
     * const eventDonorList = await prisma.eventDonorList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventDonorListFindUniqueOrThrowArgs>(args: SelectSubset<T, EventDonorListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventDonorListClient<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventDonorList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorListFindFirstArgs} args - Arguments to find a EventDonorList
     * @example
     * // Get one EventDonorList
     * const eventDonorList = await prisma.eventDonorList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventDonorListFindFirstArgs>(args?: SelectSubset<T, EventDonorListFindFirstArgs<ExtArgs>>): Prisma__EventDonorListClient<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventDonorList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorListFindFirstOrThrowArgs} args - Arguments to find a EventDonorList
     * @example
     * // Get one EventDonorList
     * const eventDonorList = await prisma.eventDonorList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventDonorListFindFirstOrThrowArgs>(args?: SelectSubset<T, EventDonorListFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventDonorListClient<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventDonorLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventDonorLists
     * const eventDonorLists = await prisma.eventDonorList.findMany()
     * 
     * // Get first 10 EventDonorLists
     * const eventDonorLists = await prisma.eventDonorList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventDonorListWithIdOnly = await prisma.eventDonorList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventDonorListFindManyArgs>(args?: SelectSubset<T, EventDonorListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventDonorList.
     * @param {EventDonorListCreateArgs} args - Arguments to create a EventDonorList.
     * @example
     * // Create one EventDonorList
     * const EventDonorList = await prisma.eventDonorList.create({
     *   data: {
     *     // ... data to create a EventDonorList
     *   }
     * })
     * 
     */
    create<T extends EventDonorListCreateArgs>(args: SelectSubset<T, EventDonorListCreateArgs<ExtArgs>>): Prisma__EventDonorListClient<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventDonorLists.
     * @param {EventDonorListCreateManyArgs} args - Arguments to create many EventDonorLists.
     * @example
     * // Create many EventDonorLists
     * const eventDonorList = await prisma.eventDonorList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventDonorListCreateManyArgs>(args?: SelectSubset<T, EventDonorListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EventDonorList.
     * @param {EventDonorListDeleteArgs} args - Arguments to delete one EventDonorList.
     * @example
     * // Delete one EventDonorList
     * const EventDonorList = await prisma.eventDonorList.delete({
     *   where: {
     *     // ... filter to delete one EventDonorList
     *   }
     * })
     * 
     */
    delete<T extends EventDonorListDeleteArgs>(args: SelectSubset<T, EventDonorListDeleteArgs<ExtArgs>>): Prisma__EventDonorListClient<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventDonorList.
     * @param {EventDonorListUpdateArgs} args - Arguments to update one EventDonorList.
     * @example
     * // Update one EventDonorList
     * const eventDonorList = await prisma.eventDonorList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventDonorListUpdateArgs>(args: SelectSubset<T, EventDonorListUpdateArgs<ExtArgs>>): Prisma__EventDonorListClient<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventDonorLists.
     * @param {EventDonorListDeleteManyArgs} args - Arguments to filter EventDonorLists to delete.
     * @example
     * // Delete a few EventDonorLists
     * const { count } = await prisma.eventDonorList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDonorListDeleteManyArgs>(args?: SelectSubset<T, EventDonorListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventDonorLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventDonorLists
     * const eventDonorList = await prisma.eventDonorList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventDonorListUpdateManyArgs>(args: SelectSubset<T, EventDonorListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventDonorList.
     * @param {EventDonorListUpsertArgs} args - Arguments to update or create a EventDonorList.
     * @example
     * // Update or create a EventDonorList
     * const eventDonorList = await prisma.eventDonorList.upsert({
     *   create: {
     *     // ... data to create a EventDonorList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventDonorList we want to update
     *   }
     * })
     */
    upsert<T extends EventDonorListUpsertArgs>(args: SelectSubset<T, EventDonorListUpsertArgs<ExtArgs>>): Prisma__EventDonorListClient<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventDonorLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorListCountArgs} args - Arguments to filter EventDonorLists to count.
     * @example
     * // Count the number of EventDonorLists
     * const count = await prisma.eventDonorList.count({
     *   where: {
     *     // ... the filter for the EventDonorLists we want to count
     *   }
     * })
    **/
    count<T extends EventDonorListCountArgs>(
      args?: Subset<T, EventDonorListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventDonorListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventDonorList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventDonorListAggregateArgs>(args: Subset<T, EventDonorListAggregateArgs>): Prisma.PrismaPromise<GetEventDonorListAggregateType<T>>

    /**
     * Group by EventDonorList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventDonorListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventDonorListGroupByArgs['orderBy'] }
        : { orderBy?: EventDonorListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventDonorListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventDonorListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventDonorList model
   */
  readonly fields: EventDonorListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventDonorList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventDonorListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    generator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    eventDonors<T extends EventDonorList$eventDonorsArgs<ExtArgs> = {}>(args?: Subset<T, EventDonorList$eventDonorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventDonorList model
   */ 
  interface EventDonorListFieldRefs {
    readonly id: FieldRef<"EventDonorList", 'Int'>
    readonly eventId: FieldRef<"EventDonorList", 'Int'>
    readonly name: FieldRef<"EventDonorList", 'String'>
    readonly totalDonors: FieldRef<"EventDonorList", 'Int'>
    readonly approved: FieldRef<"EventDonorList", 'Int'>
    readonly excluded: FieldRef<"EventDonorList", 'Int'>
    readonly pending: FieldRef<"EventDonorList", 'Int'>
    readonly autoExcluded: FieldRef<"EventDonorList", 'Int'>
    readonly reviewStatus: FieldRef<"EventDonorList", 'ReviewStatus'>
    readonly createdAt: FieldRef<"EventDonorList", 'DateTime'>
    readonly updatedAt: FieldRef<"EventDonorList", 'DateTime'>
    readonly generatedBy: FieldRef<"EventDonorList", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * EventDonorList findUnique
   */
  export type EventDonorListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    /**
     * Filter, which EventDonorList to fetch.
     */
    where: EventDonorListWhereUniqueInput
  }

  /**
   * EventDonorList findUniqueOrThrow
   */
  export type EventDonorListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    /**
     * Filter, which EventDonorList to fetch.
     */
    where: EventDonorListWhereUniqueInput
  }

  /**
   * EventDonorList findFirst
   */
  export type EventDonorListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    /**
     * Filter, which EventDonorList to fetch.
     */
    where?: EventDonorListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventDonorLists to fetch.
     */
    orderBy?: EventDonorListOrderByWithRelationInput | EventDonorListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventDonorLists.
     */
    cursor?: EventDonorListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventDonorLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventDonorLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventDonorLists.
     */
    distinct?: EventDonorListScalarFieldEnum | EventDonorListScalarFieldEnum[]
  }

  /**
   * EventDonorList findFirstOrThrow
   */
  export type EventDonorListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    /**
     * Filter, which EventDonorList to fetch.
     */
    where?: EventDonorListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventDonorLists to fetch.
     */
    orderBy?: EventDonorListOrderByWithRelationInput | EventDonorListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventDonorLists.
     */
    cursor?: EventDonorListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventDonorLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventDonorLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventDonorLists.
     */
    distinct?: EventDonorListScalarFieldEnum | EventDonorListScalarFieldEnum[]
  }

  /**
   * EventDonorList findMany
   */
  export type EventDonorListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    /**
     * Filter, which EventDonorLists to fetch.
     */
    where?: EventDonorListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventDonorLists to fetch.
     */
    orderBy?: EventDonorListOrderByWithRelationInput | EventDonorListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventDonorLists.
     */
    cursor?: EventDonorListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventDonorLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventDonorLists.
     */
    skip?: number
    distinct?: EventDonorListScalarFieldEnum | EventDonorListScalarFieldEnum[]
  }

  /**
   * EventDonorList create
   */
  export type EventDonorListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    /**
     * The data needed to create a EventDonorList.
     */
    data: XOR<EventDonorListCreateInput, EventDonorListUncheckedCreateInput>
  }

  /**
   * EventDonorList createMany
   */
  export type EventDonorListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventDonorLists.
     */
    data: EventDonorListCreateManyInput | EventDonorListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventDonorList update
   */
  export type EventDonorListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    /**
     * The data needed to update a EventDonorList.
     */
    data: XOR<EventDonorListUpdateInput, EventDonorListUncheckedUpdateInput>
    /**
     * Choose, which EventDonorList to update.
     */
    where: EventDonorListWhereUniqueInput
  }

  /**
   * EventDonorList updateMany
   */
  export type EventDonorListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventDonorLists.
     */
    data: XOR<EventDonorListUpdateManyMutationInput, EventDonorListUncheckedUpdateManyInput>
    /**
     * Filter which EventDonorLists to update
     */
    where?: EventDonorListWhereInput
  }

  /**
   * EventDonorList upsert
   */
  export type EventDonorListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    /**
     * The filter to search for the EventDonorList to update in case it exists.
     */
    where: EventDonorListWhereUniqueInput
    /**
     * In case the EventDonorList found by the `where` argument doesn't exist, create a new EventDonorList with this data.
     */
    create: XOR<EventDonorListCreateInput, EventDonorListUncheckedCreateInput>
    /**
     * In case the EventDonorList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventDonorListUpdateInput, EventDonorListUncheckedUpdateInput>
  }

  /**
   * EventDonorList delete
   */
  export type EventDonorListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    /**
     * Filter which EventDonorList to delete.
     */
    where: EventDonorListWhereUniqueInput
  }

  /**
   * EventDonorList deleteMany
   */
  export type EventDonorListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventDonorLists to delete
     */
    where?: EventDonorListWhereInput
  }

  /**
   * EventDonorList.eventDonors
   */
  export type EventDonorList$eventDonorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    where?: EventDonorWhereInput
    orderBy?: EventDonorOrderByWithRelationInput | EventDonorOrderByWithRelationInput[]
    cursor?: EventDonorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventDonorScalarFieldEnum | EventDonorScalarFieldEnum[]
  }

  /**
   * EventDonorList without action
   */
  export type EventDonorListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
  }


  /**
   * Model EventDonor
   */

  export type AggregateEventDonor = {
    _count: EventDonorCountAggregateOutputType | null
    _avg: EventDonorAvgAggregateOutputType | null
    _sum: EventDonorSumAggregateOutputType | null
    _min: EventDonorMinAggregateOutputType | null
    _max: EventDonorMaxAggregateOutputType | null
  }

  export type EventDonorAvgAggregateOutputType = {
    id: number | null
    donorListId: number | null
    donorId: number | null
    reviewerId: number | null
  }

  export type EventDonorSumAggregateOutputType = {
    id: number | null
    donorListId: number | null
    donorId: number | null
    reviewerId: number | null
  }

  export type EventDonorMinAggregateOutputType = {
    id: number | null
    donorListId: number | null
    donorId: number | null
    status: $Enums.DonorStatus | null
    excludeReason: string | null
    reviewerId: number | null
    reviewDate: Date | null
    comments: string | null
    autoExcluded: boolean | null
  }

  export type EventDonorMaxAggregateOutputType = {
    id: number | null
    donorListId: number | null
    donorId: number | null
    status: $Enums.DonorStatus | null
    excludeReason: string | null
    reviewerId: number | null
    reviewDate: Date | null
    comments: string | null
    autoExcluded: boolean | null
  }

  export type EventDonorCountAggregateOutputType = {
    id: number
    donorListId: number
    donorId: number
    status: number
    excludeReason: number
    reviewerId: number
    reviewDate: number
    comments: number
    autoExcluded: number
    _all: number
  }


  export type EventDonorAvgAggregateInputType = {
    id?: true
    donorListId?: true
    donorId?: true
    reviewerId?: true
  }

  export type EventDonorSumAggregateInputType = {
    id?: true
    donorListId?: true
    donorId?: true
    reviewerId?: true
  }

  export type EventDonorMinAggregateInputType = {
    id?: true
    donorListId?: true
    donorId?: true
    status?: true
    excludeReason?: true
    reviewerId?: true
    reviewDate?: true
    comments?: true
    autoExcluded?: true
  }

  export type EventDonorMaxAggregateInputType = {
    id?: true
    donorListId?: true
    donorId?: true
    status?: true
    excludeReason?: true
    reviewerId?: true
    reviewDate?: true
    comments?: true
    autoExcluded?: true
  }

  export type EventDonorCountAggregateInputType = {
    id?: true
    donorListId?: true
    donorId?: true
    status?: true
    excludeReason?: true
    reviewerId?: true
    reviewDate?: true
    comments?: true
    autoExcluded?: true
    _all?: true
  }

  export type EventDonorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventDonor to aggregate.
     */
    where?: EventDonorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventDonors to fetch.
     */
    orderBy?: EventDonorOrderByWithRelationInput | EventDonorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventDonorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventDonors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventDonors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventDonors
    **/
    _count?: true | EventDonorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventDonorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventDonorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventDonorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventDonorMaxAggregateInputType
  }

  export type GetEventDonorAggregateType<T extends EventDonorAggregateArgs> = {
        [P in keyof T & keyof AggregateEventDonor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventDonor[P]>
      : GetScalarType<T[P], AggregateEventDonor[P]>
  }




  export type EventDonorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventDonorWhereInput
    orderBy?: EventDonorOrderByWithAggregationInput | EventDonorOrderByWithAggregationInput[]
    by: EventDonorScalarFieldEnum[] | EventDonorScalarFieldEnum
    having?: EventDonorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventDonorCountAggregateInputType | true
    _avg?: EventDonorAvgAggregateInputType
    _sum?: EventDonorSumAggregateInputType
    _min?: EventDonorMinAggregateInputType
    _max?: EventDonorMaxAggregateInputType
  }

  export type EventDonorGroupByOutputType = {
    id: number
    donorListId: number
    donorId: number
    status: $Enums.DonorStatus
    excludeReason: string | null
    reviewerId: number | null
    reviewDate: Date | null
    comments: string | null
    autoExcluded: boolean
    _count: EventDonorCountAggregateOutputType | null
    _avg: EventDonorAvgAggregateOutputType | null
    _sum: EventDonorSumAggregateOutputType | null
    _min: EventDonorMinAggregateOutputType | null
    _max: EventDonorMaxAggregateOutputType | null
  }

  type GetEventDonorGroupByPayload<T extends EventDonorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventDonorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventDonorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventDonorGroupByOutputType[P]>
            : GetScalarType<T[P], EventDonorGroupByOutputType[P]>
        }
      >
    >


  export type EventDonorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    donorListId?: boolean
    donorId?: boolean
    status?: boolean
    excludeReason?: boolean
    reviewerId?: boolean
    reviewDate?: boolean
    comments?: boolean
    autoExcluded?: boolean
    donorList?: boolean | EventDonorListDefaultArgs<ExtArgs>
    donor?: boolean | DonorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventDonor"]>


  export type EventDonorSelectScalar = {
    id?: boolean
    donorListId?: boolean
    donorId?: boolean
    status?: boolean
    excludeReason?: boolean
    reviewerId?: boolean
    reviewDate?: boolean
    comments?: boolean
    autoExcluded?: boolean
  }

  export type EventDonorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    donorList?: boolean | EventDonorListDefaultArgs<ExtArgs>
    donor?: boolean | DonorDefaultArgs<ExtArgs>
  }

  export type $EventDonorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventDonor"
    objects: {
      donorList: Prisma.$EventDonorListPayload<ExtArgs>
      donor: Prisma.$DonorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      donorListId: number
      donorId: number
      status: $Enums.DonorStatus
      excludeReason: string | null
      reviewerId: number | null
      reviewDate: Date | null
      comments: string | null
      autoExcluded: boolean
    }, ExtArgs["result"]["eventDonor"]>
    composites: {}
  }

  type EventDonorGetPayload<S extends boolean | null | undefined | EventDonorDefaultArgs> = $Result.GetResult<Prisma.$EventDonorPayload, S>

  type EventDonorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventDonorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventDonorCountAggregateInputType | true
    }

  export interface EventDonorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventDonor'], meta: { name: 'EventDonor' } }
    /**
     * Find zero or one EventDonor that matches the filter.
     * @param {EventDonorFindUniqueArgs} args - Arguments to find a EventDonor
     * @example
     * // Get one EventDonor
     * const eventDonor = await prisma.eventDonor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventDonorFindUniqueArgs>(args: SelectSubset<T, EventDonorFindUniqueArgs<ExtArgs>>): Prisma__EventDonorClient<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventDonor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventDonorFindUniqueOrThrowArgs} args - Arguments to find a EventDonor
     * @example
     * // Get one EventDonor
     * const eventDonor = await prisma.eventDonor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventDonorFindUniqueOrThrowArgs>(args: SelectSubset<T, EventDonorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventDonorClient<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventDonor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorFindFirstArgs} args - Arguments to find a EventDonor
     * @example
     * // Get one EventDonor
     * const eventDonor = await prisma.eventDonor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventDonorFindFirstArgs>(args?: SelectSubset<T, EventDonorFindFirstArgs<ExtArgs>>): Prisma__EventDonorClient<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventDonor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorFindFirstOrThrowArgs} args - Arguments to find a EventDonor
     * @example
     * // Get one EventDonor
     * const eventDonor = await prisma.eventDonor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventDonorFindFirstOrThrowArgs>(args?: SelectSubset<T, EventDonorFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventDonorClient<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventDonors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventDonors
     * const eventDonors = await prisma.eventDonor.findMany()
     * 
     * // Get first 10 EventDonors
     * const eventDonors = await prisma.eventDonor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventDonorWithIdOnly = await prisma.eventDonor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventDonorFindManyArgs>(args?: SelectSubset<T, EventDonorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventDonor.
     * @param {EventDonorCreateArgs} args - Arguments to create a EventDonor.
     * @example
     * // Create one EventDonor
     * const EventDonor = await prisma.eventDonor.create({
     *   data: {
     *     // ... data to create a EventDonor
     *   }
     * })
     * 
     */
    create<T extends EventDonorCreateArgs>(args: SelectSubset<T, EventDonorCreateArgs<ExtArgs>>): Prisma__EventDonorClient<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventDonors.
     * @param {EventDonorCreateManyArgs} args - Arguments to create many EventDonors.
     * @example
     * // Create many EventDonors
     * const eventDonor = await prisma.eventDonor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventDonorCreateManyArgs>(args?: SelectSubset<T, EventDonorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EventDonor.
     * @param {EventDonorDeleteArgs} args - Arguments to delete one EventDonor.
     * @example
     * // Delete one EventDonor
     * const EventDonor = await prisma.eventDonor.delete({
     *   where: {
     *     // ... filter to delete one EventDonor
     *   }
     * })
     * 
     */
    delete<T extends EventDonorDeleteArgs>(args: SelectSubset<T, EventDonorDeleteArgs<ExtArgs>>): Prisma__EventDonorClient<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventDonor.
     * @param {EventDonorUpdateArgs} args - Arguments to update one EventDonor.
     * @example
     * // Update one EventDonor
     * const eventDonor = await prisma.eventDonor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventDonorUpdateArgs>(args: SelectSubset<T, EventDonorUpdateArgs<ExtArgs>>): Prisma__EventDonorClient<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventDonors.
     * @param {EventDonorDeleteManyArgs} args - Arguments to filter EventDonors to delete.
     * @example
     * // Delete a few EventDonors
     * const { count } = await prisma.eventDonor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDonorDeleteManyArgs>(args?: SelectSubset<T, EventDonorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventDonors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventDonors
     * const eventDonor = await prisma.eventDonor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventDonorUpdateManyArgs>(args: SelectSubset<T, EventDonorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventDonor.
     * @param {EventDonorUpsertArgs} args - Arguments to update or create a EventDonor.
     * @example
     * // Update or create a EventDonor
     * const eventDonor = await prisma.eventDonor.upsert({
     *   create: {
     *     // ... data to create a EventDonor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventDonor we want to update
     *   }
     * })
     */
    upsert<T extends EventDonorUpsertArgs>(args: SelectSubset<T, EventDonorUpsertArgs<ExtArgs>>): Prisma__EventDonorClient<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventDonors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorCountArgs} args - Arguments to filter EventDonors to count.
     * @example
     * // Count the number of EventDonors
     * const count = await prisma.eventDonor.count({
     *   where: {
     *     // ... the filter for the EventDonors we want to count
     *   }
     * })
    **/
    count<T extends EventDonorCountArgs>(
      args?: Subset<T, EventDonorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventDonorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventDonor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventDonorAggregateArgs>(args: Subset<T, EventDonorAggregateArgs>): Prisma.PrismaPromise<GetEventDonorAggregateType<T>>

    /**
     * Group by EventDonor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventDonorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventDonorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventDonorGroupByArgs['orderBy'] }
        : { orderBy?: EventDonorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventDonorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventDonorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventDonor model
   */
  readonly fields: EventDonorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventDonor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventDonorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    donorList<T extends EventDonorListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDonorListDefaultArgs<ExtArgs>>): Prisma__EventDonorListClient<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    donor<T extends DonorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DonorDefaultArgs<ExtArgs>>): Prisma__DonorClient<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventDonor model
   */ 
  interface EventDonorFieldRefs {
    readonly id: FieldRef<"EventDonor", 'Int'>
    readonly donorListId: FieldRef<"EventDonor", 'Int'>
    readonly donorId: FieldRef<"EventDonor", 'Int'>
    readonly status: FieldRef<"EventDonor", 'DonorStatus'>
    readonly excludeReason: FieldRef<"EventDonor", 'String'>
    readonly reviewerId: FieldRef<"EventDonor", 'Int'>
    readonly reviewDate: FieldRef<"EventDonor", 'DateTime'>
    readonly comments: FieldRef<"EventDonor", 'String'>
    readonly autoExcluded: FieldRef<"EventDonor", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * EventDonor findUnique
   */
  export type EventDonorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    /**
     * Filter, which EventDonor to fetch.
     */
    where: EventDonorWhereUniqueInput
  }

  /**
   * EventDonor findUniqueOrThrow
   */
  export type EventDonorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    /**
     * Filter, which EventDonor to fetch.
     */
    where: EventDonorWhereUniqueInput
  }

  /**
   * EventDonor findFirst
   */
  export type EventDonorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    /**
     * Filter, which EventDonor to fetch.
     */
    where?: EventDonorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventDonors to fetch.
     */
    orderBy?: EventDonorOrderByWithRelationInput | EventDonorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventDonors.
     */
    cursor?: EventDonorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventDonors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventDonors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventDonors.
     */
    distinct?: EventDonorScalarFieldEnum | EventDonorScalarFieldEnum[]
  }

  /**
   * EventDonor findFirstOrThrow
   */
  export type EventDonorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    /**
     * Filter, which EventDonor to fetch.
     */
    where?: EventDonorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventDonors to fetch.
     */
    orderBy?: EventDonorOrderByWithRelationInput | EventDonorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventDonors.
     */
    cursor?: EventDonorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventDonors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventDonors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventDonors.
     */
    distinct?: EventDonorScalarFieldEnum | EventDonorScalarFieldEnum[]
  }

  /**
   * EventDonor findMany
   */
  export type EventDonorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    /**
     * Filter, which EventDonors to fetch.
     */
    where?: EventDonorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventDonors to fetch.
     */
    orderBy?: EventDonorOrderByWithRelationInput | EventDonorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventDonors.
     */
    cursor?: EventDonorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventDonors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventDonors.
     */
    skip?: number
    distinct?: EventDonorScalarFieldEnum | EventDonorScalarFieldEnum[]
  }

  /**
   * EventDonor create
   */
  export type EventDonorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    /**
     * The data needed to create a EventDonor.
     */
    data: XOR<EventDonorCreateInput, EventDonorUncheckedCreateInput>
  }

  /**
   * EventDonor createMany
   */
  export type EventDonorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventDonors.
     */
    data: EventDonorCreateManyInput | EventDonorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventDonor update
   */
  export type EventDonorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    /**
     * The data needed to update a EventDonor.
     */
    data: XOR<EventDonorUpdateInput, EventDonorUncheckedUpdateInput>
    /**
     * Choose, which EventDonor to update.
     */
    where: EventDonorWhereUniqueInput
  }

  /**
   * EventDonor updateMany
   */
  export type EventDonorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventDonors.
     */
    data: XOR<EventDonorUpdateManyMutationInput, EventDonorUncheckedUpdateManyInput>
    /**
     * Filter which EventDonors to update
     */
    where?: EventDonorWhereInput
  }

  /**
   * EventDonor upsert
   */
  export type EventDonorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    /**
     * The filter to search for the EventDonor to update in case it exists.
     */
    where: EventDonorWhereUniqueInput
    /**
     * In case the EventDonor found by the `where` argument doesn't exist, create a new EventDonor with this data.
     */
    create: XOR<EventDonorCreateInput, EventDonorUncheckedCreateInput>
    /**
     * In case the EventDonor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventDonorUpdateInput, EventDonorUncheckedUpdateInput>
  }

  /**
   * EventDonor delete
   */
  export type EventDonorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    /**
     * Filter which EventDonor to delete.
     */
    where: EventDonorWhereUniqueInput
  }

  /**
   * EventDonor deleteMany
   */
  export type EventDonorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventDonors to delete
     */
    where?: EventDonorWhereInput
  }

  /**
   * EventDonor without action
   */
  export type EventDonorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
  }


  /**
   * Model Donor
   */

  export type AggregateDonor = {
    _count: DonorCountAggregateOutputType | null
    _avg: DonorAvgAggregateOutputType | null
    _sum: DonorSumAggregateOutputType | null
    _min: DonorMinAggregateOutputType | null
    _max: DonorMaxAggregateOutputType | null
  }

  export type DonorAvgAggregateOutputType = {
    id: number | null
    totalDonations: number | null
    totalPledges: number | null
    largestGift: number | null
    lastGiftAmount: number | null
  }

  export type DonorSumAggregateOutputType = {
    id: number | null
    totalDonations: number | null
    totalPledges: number | null
    largestGift: number | null
    lastGiftAmount: number | null
  }

  export type DonorMinAggregateOutputType = {
    id: number | null
    pmm: string | null
    smm: string | null
    vmm: string | null
    excluded: boolean | null
    deceased: boolean | null
    firstName: string | null
    nickName: string | null
    lastName: string | null
    organizationName: string | null
    totalDonations: number | null
    totalPledges: number | null
    largestGift: number | null
    largestGiftAppeal: string | null
    firstGiftDate: Date | null
    lastGiftDate: Date | null
    lastGiftAmount: number | null
    lastGiftRequest: string | null
    lastGiftAppeal: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    contactPhoneType: string | null
    phoneRestrictions: string | null
    emailRestrictions: string | null
    communicationRestrictions: string | null
    subscriptionEventsInPerson: string | null
    subscriptionEventsMagazine: string | null
    communicationPreference: string | null
    tags: string | null
  }

  export type DonorMaxAggregateOutputType = {
    id: number | null
    pmm: string | null
    smm: string | null
    vmm: string | null
    excluded: boolean | null
    deceased: boolean | null
    firstName: string | null
    nickName: string | null
    lastName: string | null
    organizationName: string | null
    totalDonations: number | null
    totalPledges: number | null
    largestGift: number | null
    largestGiftAppeal: string | null
    firstGiftDate: Date | null
    lastGiftDate: Date | null
    lastGiftAmount: number | null
    lastGiftRequest: string | null
    lastGiftAppeal: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    contactPhoneType: string | null
    phoneRestrictions: string | null
    emailRestrictions: string | null
    communicationRestrictions: string | null
    subscriptionEventsInPerson: string | null
    subscriptionEventsMagazine: string | null
    communicationPreference: string | null
    tags: string | null
  }

  export type DonorCountAggregateOutputType = {
    id: number
    pmm: number
    smm: number
    vmm: number
    excluded: number
    deceased: number
    firstName: number
    nickName: number
    lastName: number
    organizationName: number
    totalDonations: number
    totalPledges: number
    largestGift: number
    largestGiftAppeal: number
    firstGiftDate: number
    lastGiftDate: number
    lastGiftAmount: number
    lastGiftRequest: number
    lastGiftAppeal: number
    addressLine1: number
    addressLine2: number
    city: number
    contactPhoneType: number
    phoneRestrictions: number
    emailRestrictions: number
    communicationRestrictions: number
    subscriptionEventsInPerson: number
    subscriptionEventsMagazine: number
    communicationPreference: number
    tags: number
    _all: number
  }


  export type DonorAvgAggregateInputType = {
    id?: true
    totalDonations?: true
    totalPledges?: true
    largestGift?: true
    lastGiftAmount?: true
  }

  export type DonorSumAggregateInputType = {
    id?: true
    totalDonations?: true
    totalPledges?: true
    largestGift?: true
    lastGiftAmount?: true
  }

  export type DonorMinAggregateInputType = {
    id?: true
    pmm?: true
    smm?: true
    vmm?: true
    excluded?: true
    deceased?: true
    firstName?: true
    nickName?: true
    lastName?: true
    organizationName?: true
    totalDonations?: true
    totalPledges?: true
    largestGift?: true
    largestGiftAppeal?: true
    firstGiftDate?: true
    lastGiftDate?: true
    lastGiftAmount?: true
    lastGiftRequest?: true
    lastGiftAppeal?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    contactPhoneType?: true
    phoneRestrictions?: true
    emailRestrictions?: true
    communicationRestrictions?: true
    subscriptionEventsInPerson?: true
    subscriptionEventsMagazine?: true
    communicationPreference?: true
    tags?: true
  }

  export type DonorMaxAggregateInputType = {
    id?: true
    pmm?: true
    smm?: true
    vmm?: true
    excluded?: true
    deceased?: true
    firstName?: true
    nickName?: true
    lastName?: true
    organizationName?: true
    totalDonations?: true
    totalPledges?: true
    largestGift?: true
    largestGiftAppeal?: true
    firstGiftDate?: true
    lastGiftDate?: true
    lastGiftAmount?: true
    lastGiftRequest?: true
    lastGiftAppeal?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    contactPhoneType?: true
    phoneRestrictions?: true
    emailRestrictions?: true
    communicationRestrictions?: true
    subscriptionEventsInPerson?: true
    subscriptionEventsMagazine?: true
    communicationPreference?: true
    tags?: true
  }

  export type DonorCountAggregateInputType = {
    id?: true
    pmm?: true
    smm?: true
    vmm?: true
    excluded?: true
    deceased?: true
    firstName?: true
    nickName?: true
    lastName?: true
    organizationName?: true
    totalDonations?: true
    totalPledges?: true
    largestGift?: true
    largestGiftAppeal?: true
    firstGiftDate?: true
    lastGiftDate?: true
    lastGiftAmount?: true
    lastGiftRequest?: true
    lastGiftAppeal?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    contactPhoneType?: true
    phoneRestrictions?: true
    emailRestrictions?: true
    communicationRestrictions?: true
    subscriptionEventsInPerson?: true
    subscriptionEventsMagazine?: true
    communicationPreference?: true
    tags?: true
    _all?: true
  }

  export type DonorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Donor to aggregate.
     */
    where?: DonorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donors to fetch.
     */
    orderBy?: DonorOrderByWithRelationInput | DonorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DonorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Donors
    **/
    _count?: true | DonorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonorMaxAggregateInputType
  }

  export type GetDonorAggregateType<T extends DonorAggregateArgs> = {
        [P in keyof T & keyof AggregateDonor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonor[P]>
      : GetScalarType<T[P], AggregateDonor[P]>
  }




  export type DonorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonorWhereInput
    orderBy?: DonorOrderByWithAggregationInput | DonorOrderByWithAggregationInput[]
    by: DonorScalarFieldEnum[] | DonorScalarFieldEnum
    having?: DonorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonorCountAggregateInputType | true
    _avg?: DonorAvgAggregateInputType
    _sum?: DonorSumAggregateInputType
    _min?: DonorMinAggregateInputType
    _max?: DonorMaxAggregateInputType
  }

  export type DonorGroupByOutputType = {
    id: number
    pmm: string | null
    smm: string | null
    vmm: string | null
    excluded: boolean
    deceased: boolean
    firstName: string | null
    nickName: string | null
    lastName: string | null
    organizationName: string | null
    totalDonations: number
    totalPledges: number
    largestGift: number
    largestGiftAppeal: string | null
    firstGiftDate: Date | null
    lastGiftDate: Date | null
    lastGiftAmount: number
    lastGiftRequest: string | null
    lastGiftAppeal: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    contactPhoneType: string | null
    phoneRestrictions: string | null
    emailRestrictions: string | null
    communicationRestrictions: string | null
    subscriptionEventsInPerson: string | null
    subscriptionEventsMagazine: string | null
    communicationPreference: string | null
    tags: string | null
    _count: DonorCountAggregateOutputType | null
    _avg: DonorAvgAggregateOutputType | null
    _sum: DonorSumAggregateOutputType | null
    _min: DonorMinAggregateOutputType | null
    _max: DonorMaxAggregateOutputType | null
  }

  type GetDonorGroupByPayload<T extends DonorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DonorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonorGroupByOutputType[P]>
            : GetScalarType<T[P], DonorGroupByOutputType[P]>
        }
      >
    >


  export type DonorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pmm?: boolean
    smm?: boolean
    vmm?: boolean
    excluded?: boolean
    deceased?: boolean
    firstName?: boolean
    nickName?: boolean
    lastName?: boolean
    organizationName?: boolean
    totalDonations?: boolean
    totalPledges?: boolean
    largestGift?: boolean
    largestGiftAppeal?: boolean
    firstGiftDate?: boolean
    lastGiftDate?: boolean
    lastGiftAmount?: boolean
    lastGiftRequest?: boolean
    lastGiftAppeal?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    contactPhoneType?: boolean
    phoneRestrictions?: boolean
    emailRestrictions?: boolean
    communicationRestrictions?: boolean
    subscriptionEventsInPerson?: boolean
    subscriptionEventsMagazine?: boolean
    communicationPreference?: boolean
    tags?: boolean
    eventDonors?: boolean | Donor$eventDonorsArgs<ExtArgs>
    _count?: boolean | DonorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["donor"]>


  export type DonorSelectScalar = {
    id?: boolean
    pmm?: boolean
    smm?: boolean
    vmm?: boolean
    excluded?: boolean
    deceased?: boolean
    firstName?: boolean
    nickName?: boolean
    lastName?: boolean
    organizationName?: boolean
    totalDonations?: boolean
    totalPledges?: boolean
    largestGift?: boolean
    largestGiftAppeal?: boolean
    firstGiftDate?: boolean
    lastGiftDate?: boolean
    lastGiftAmount?: boolean
    lastGiftRequest?: boolean
    lastGiftAppeal?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    contactPhoneType?: boolean
    phoneRestrictions?: boolean
    emailRestrictions?: boolean
    communicationRestrictions?: boolean
    subscriptionEventsInPerson?: boolean
    subscriptionEventsMagazine?: boolean
    communicationPreference?: boolean
    tags?: boolean
  }

  export type DonorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventDonors?: boolean | Donor$eventDonorsArgs<ExtArgs>
    _count?: boolean | DonorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DonorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Donor"
    objects: {
      eventDonors: Prisma.$EventDonorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pmm: string | null
      smm: string | null
      vmm: string | null
      excluded: boolean
      deceased: boolean
      firstName: string | null
      nickName: string | null
      lastName: string | null
      organizationName: string | null
      totalDonations: number
      totalPledges: number
      largestGift: number
      largestGiftAppeal: string | null
      firstGiftDate: Date | null
      lastGiftDate: Date | null
      lastGiftAmount: number
      lastGiftRequest: string | null
      lastGiftAppeal: string | null
      addressLine1: string | null
      addressLine2: string | null
      city: string | null
      contactPhoneType: string | null
      phoneRestrictions: string | null
      emailRestrictions: string | null
      communicationRestrictions: string | null
      subscriptionEventsInPerson: string | null
      subscriptionEventsMagazine: string | null
      communicationPreference: string | null
      tags: string | null
    }, ExtArgs["result"]["donor"]>
    composites: {}
  }

  type DonorGetPayload<S extends boolean | null | undefined | DonorDefaultArgs> = $Result.GetResult<Prisma.$DonorPayload, S>

  type DonorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DonorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DonorCountAggregateInputType | true
    }

  export interface DonorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Donor'], meta: { name: 'Donor' } }
    /**
     * Find zero or one Donor that matches the filter.
     * @param {DonorFindUniqueArgs} args - Arguments to find a Donor
     * @example
     * // Get one Donor
     * const donor = await prisma.donor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DonorFindUniqueArgs>(args: SelectSubset<T, DonorFindUniqueArgs<ExtArgs>>): Prisma__DonorClient<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Donor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DonorFindUniqueOrThrowArgs} args - Arguments to find a Donor
     * @example
     * // Get one Donor
     * const donor = await prisma.donor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DonorFindUniqueOrThrowArgs>(args: SelectSubset<T, DonorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DonorClient<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Donor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonorFindFirstArgs} args - Arguments to find a Donor
     * @example
     * // Get one Donor
     * const donor = await prisma.donor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DonorFindFirstArgs>(args?: SelectSubset<T, DonorFindFirstArgs<ExtArgs>>): Prisma__DonorClient<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Donor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonorFindFirstOrThrowArgs} args - Arguments to find a Donor
     * @example
     * // Get one Donor
     * const donor = await prisma.donor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DonorFindFirstOrThrowArgs>(args?: SelectSubset<T, DonorFindFirstOrThrowArgs<ExtArgs>>): Prisma__DonorClient<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Donors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Donors
     * const donors = await prisma.donor.findMany()
     * 
     * // Get first 10 Donors
     * const donors = await prisma.donor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const donorWithIdOnly = await prisma.donor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DonorFindManyArgs>(args?: SelectSubset<T, DonorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Donor.
     * @param {DonorCreateArgs} args - Arguments to create a Donor.
     * @example
     * // Create one Donor
     * const Donor = await prisma.donor.create({
     *   data: {
     *     // ... data to create a Donor
     *   }
     * })
     * 
     */
    create<T extends DonorCreateArgs>(args: SelectSubset<T, DonorCreateArgs<ExtArgs>>): Prisma__DonorClient<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Donors.
     * @param {DonorCreateManyArgs} args - Arguments to create many Donors.
     * @example
     * // Create many Donors
     * const donor = await prisma.donor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DonorCreateManyArgs>(args?: SelectSubset<T, DonorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Donor.
     * @param {DonorDeleteArgs} args - Arguments to delete one Donor.
     * @example
     * // Delete one Donor
     * const Donor = await prisma.donor.delete({
     *   where: {
     *     // ... filter to delete one Donor
     *   }
     * })
     * 
     */
    delete<T extends DonorDeleteArgs>(args: SelectSubset<T, DonorDeleteArgs<ExtArgs>>): Prisma__DonorClient<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Donor.
     * @param {DonorUpdateArgs} args - Arguments to update one Donor.
     * @example
     * // Update one Donor
     * const donor = await prisma.donor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DonorUpdateArgs>(args: SelectSubset<T, DonorUpdateArgs<ExtArgs>>): Prisma__DonorClient<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Donors.
     * @param {DonorDeleteManyArgs} args - Arguments to filter Donors to delete.
     * @example
     * // Delete a few Donors
     * const { count } = await prisma.donor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DonorDeleteManyArgs>(args?: SelectSubset<T, DonorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Donors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Donors
     * const donor = await prisma.donor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DonorUpdateManyArgs>(args: SelectSubset<T, DonorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Donor.
     * @param {DonorUpsertArgs} args - Arguments to update or create a Donor.
     * @example
     * // Update or create a Donor
     * const donor = await prisma.donor.upsert({
     *   create: {
     *     // ... data to create a Donor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Donor we want to update
     *   }
     * })
     */
    upsert<T extends DonorUpsertArgs>(args: SelectSubset<T, DonorUpsertArgs<ExtArgs>>): Prisma__DonorClient<$Result.GetResult<Prisma.$DonorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Donors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonorCountArgs} args - Arguments to filter Donors to count.
     * @example
     * // Count the number of Donors
     * const count = await prisma.donor.count({
     *   where: {
     *     // ... the filter for the Donors we want to count
     *   }
     * })
    **/
    count<T extends DonorCountArgs>(
      args?: Subset<T, DonorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Donor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonorAggregateArgs>(args: Subset<T, DonorAggregateArgs>): Prisma.PrismaPromise<GetDonorAggregateType<T>>

    /**
     * Group by Donor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DonorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DonorGroupByArgs['orderBy'] }
        : { orderBy?: DonorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DonorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Donor model
   */
  readonly fields: DonorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Donor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DonorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    eventDonors<T extends Donor$eventDonorsArgs<ExtArgs> = {}>(args?: Subset<T, Donor$eventDonorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventDonorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Donor model
   */ 
  interface DonorFieldRefs {
    readonly id: FieldRef<"Donor", 'Int'>
    readonly pmm: FieldRef<"Donor", 'String'>
    readonly smm: FieldRef<"Donor", 'String'>
    readonly vmm: FieldRef<"Donor", 'String'>
    readonly excluded: FieldRef<"Donor", 'Boolean'>
    readonly deceased: FieldRef<"Donor", 'Boolean'>
    readonly firstName: FieldRef<"Donor", 'String'>
    readonly nickName: FieldRef<"Donor", 'String'>
    readonly lastName: FieldRef<"Donor", 'String'>
    readonly organizationName: FieldRef<"Donor", 'String'>
    readonly totalDonations: FieldRef<"Donor", 'Float'>
    readonly totalPledges: FieldRef<"Donor", 'Float'>
    readonly largestGift: FieldRef<"Donor", 'Float'>
    readonly largestGiftAppeal: FieldRef<"Donor", 'String'>
    readonly firstGiftDate: FieldRef<"Donor", 'DateTime'>
    readonly lastGiftDate: FieldRef<"Donor", 'DateTime'>
    readonly lastGiftAmount: FieldRef<"Donor", 'Float'>
    readonly lastGiftRequest: FieldRef<"Donor", 'String'>
    readonly lastGiftAppeal: FieldRef<"Donor", 'String'>
    readonly addressLine1: FieldRef<"Donor", 'String'>
    readonly addressLine2: FieldRef<"Donor", 'String'>
    readonly city: FieldRef<"Donor", 'String'>
    readonly contactPhoneType: FieldRef<"Donor", 'String'>
    readonly phoneRestrictions: FieldRef<"Donor", 'String'>
    readonly emailRestrictions: FieldRef<"Donor", 'String'>
    readonly communicationRestrictions: FieldRef<"Donor", 'String'>
    readonly subscriptionEventsInPerson: FieldRef<"Donor", 'String'>
    readonly subscriptionEventsMagazine: FieldRef<"Donor", 'String'>
    readonly communicationPreference: FieldRef<"Donor", 'String'>
    readonly tags: FieldRef<"Donor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Donor findUnique
   */
  export type DonorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
    /**
     * Filter, which Donor to fetch.
     */
    where: DonorWhereUniqueInput
  }

  /**
   * Donor findUniqueOrThrow
   */
  export type DonorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
    /**
     * Filter, which Donor to fetch.
     */
    where: DonorWhereUniqueInput
  }

  /**
   * Donor findFirst
   */
  export type DonorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
    /**
     * Filter, which Donor to fetch.
     */
    where?: DonorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donors to fetch.
     */
    orderBy?: DonorOrderByWithRelationInput | DonorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Donors.
     */
    cursor?: DonorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Donors.
     */
    distinct?: DonorScalarFieldEnum | DonorScalarFieldEnum[]
  }

  /**
   * Donor findFirstOrThrow
   */
  export type DonorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
    /**
     * Filter, which Donor to fetch.
     */
    where?: DonorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donors to fetch.
     */
    orderBy?: DonorOrderByWithRelationInput | DonorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Donors.
     */
    cursor?: DonorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Donors.
     */
    distinct?: DonorScalarFieldEnum | DonorScalarFieldEnum[]
  }

  /**
   * Donor findMany
   */
  export type DonorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
    /**
     * Filter, which Donors to fetch.
     */
    where?: DonorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donors to fetch.
     */
    orderBy?: DonorOrderByWithRelationInput | DonorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Donors.
     */
    cursor?: DonorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donors.
     */
    skip?: number
    distinct?: DonorScalarFieldEnum | DonorScalarFieldEnum[]
  }

  /**
   * Donor create
   */
  export type DonorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
    /**
     * The data needed to create a Donor.
     */
    data?: XOR<DonorCreateInput, DonorUncheckedCreateInput>
  }

  /**
   * Donor createMany
   */
  export type DonorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Donors.
     */
    data: DonorCreateManyInput | DonorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Donor update
   */
  export type DonorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
    /**
     * The data needed to update a Donor.
     */
    data: XOR<DonorUpdateInput, DonorUncheckedUpdateInput>
    /**
     * Choose, which Donor to update.
     */
    where: DonorWhereUniqueInput
  }

  /**
   * Donor updateMany
   */
  export type DonorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Donors.
     */
    data: XOR<DonorUpdateManyMutationInput, DonorUncheckedUpdateManyInput>
    /**
     * Filter which Donors to update
     */
    where?: DonorWhereInput
  }

  /**
   * Donor upsert
   */
  export type DonorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
    /**
     * The filter to search for the Donor to update in case it exists.
     */
    where: DonorWhereUniqueInput
    /**
     * In case the Donor found by the `where` argument doesn't exist, create a new Donor with this data.
     */
    create: XOR<DonorCreateInput, DonorUncheckedCreateInput>
    /**
     * In case the Donor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DonorUpdateInput, DonorUncheckedUpdateInput>
  }

  /**
   * Donor delete
   */
  export type DonorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
    /**
     * Filter which Donor to delete.
     */
    where: DonorWhereUniqueInput
  }

  /**
   * Donor deleteMany
   */
  export type DonorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Donors to delete
     */
    where?: DonorWhereInput
  }

  /**
   * Donor.eventDonors
   */
  export type Donor$eventDonorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonor
     */
    select?: EventDonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorInclude<ExtArgs> | null
    where?: EventDonorWhereInput
    orderBy?: EventDonorOrderByWithRelationInput | EventDonorOrderByWithRelationInput[]
    cursor?: EventDonorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventDonorScalarFieldEnum | EventDonorScalarFieldEnum[]
  }

  /**
   * Donor without action
   */
  export type DonorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Donor
     */
    select?: DonorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonorInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
    capacity: number | null
    criteriaMinGivingLevel: number | null
    createdBy: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
    capacity: number | null
    criteriaMinGivingLevel: number | null
    createdBy: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    date: Date | null
    location: string | null
    capacity: number | null
    focus: string | null
    criteriaMinGivingLevel: number | null
    timelineListGenerationDate: Date | null
    timelineReviewDeadline: Date | null
    timelineInvitationDate: Date | null
    status: $Enums.EventStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    date: Date | null
    location: string | null
    capacity: number | null
    focus: string | null
    criteriaMinGivingLevel: number | null
    timelineListGenerationDate: Date | null
    timelineReviewDeadline: Date | null
    timelineInvitationDate: Date | null
    status: $Enums.EventStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    name: number
    type: number
    date: number
    location: number
    capacity: number
    focus: number
    criteriaMinGivingLevel: number
    timelineListGenerationDate: number
    timelineReviewDeadline: number
    timelineInvitationDate: number
    status: number
    createdAt: number
    updatedAt: number
    createdBy: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
    capacity?: true
    criteriaMinGivingLevel?: true
    createdBy?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
    capacity?: true
    criteriaMinGivingLevel?: true
    createdBy?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    date?: true
    location?: true
    capacity?: true
    focus?: true
    criteriaMinGivingLevel?: true
    timelineListGenerationDate?: true
    timelineReviewDeadline?: true
    timelineInvitationDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    date?: true
    location?: true
    capacity?: true
    focus?: true
    criteriaMinGivingLevel?: true
    timelineListGenerationDate?: true
    timelineReviewDeadline?: true
    timelineInvitationDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    date?: true
    location?: true
    capacity?: true
    focus?: true
    criteriaMinGivingLevel?: true
    timelineListGenerationDate?: true
    timelineReviewDeadline?: true
    timelineInvitationDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    name: string
    type: string
    date: Date
    location: string
    capacity: number
    focus: string | null
    criteriaMinGivingLevel: number
    timelineListGenerationDate: Date | null
    timelineReviewDeadline: Date | null
    timelineInvitationDate: Date | null
    status: $Enums.EventStatus
    createdAt: Date
    updatedAt: Date
    createdBy: number
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    date?: boolean
    location?: boolean
    capacity?: boolean
    focus?: boolean
    criteriaMinGivingLevel?: boolean
    timelineListGenerationDate?: boolean
    timelineReviewDeadline?: boolean
    timelineInvitationDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    donorLists?: boolean | Event$donorListsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>


  export type EventSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    date?: boolean
    location?: boolean
    capacity?: boolean
    focus?: boolean
    criteriaMinGivingLevel?: boolean
    timelineListGenerationDate?: boolean
    timelineReviewDeadline?: boolean
    timelineInvitationDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    donorLists?: boolean | Event$donorListsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      donorLists: Prisma.$EventDonorListPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string
      date: Date
      location: string
      capacity: number
      focus: string | null
      criteriaMinGivingLevel: number
      timelineListGenerationDate: Date | null
      timelineReviewDeadline: Date | null
      timelineInvitationDate: Date | null
      status: $Enums.EventStatus
      createdAt: Date
      updatedAt: Date
      createdBy: number
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    donorLists<T extends Event$donorListsArgs<ExtArgs> = {}>(args?: Subset<T, Event$donorListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventDonorListPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly name: FieldRef<"Event", 'String'>
    readonly type: FieldRef<"Event", 'String'>
    readonly date: FieldRef<"Event", 'DateTime'>
    readonly location: FieldRef<"Event", 'String'>
    readonly capacity: FieldRef<"Event", 'Int'>
    readonly focus: FieldRef<"Event", 'String'>
    readonly criteriaMinGivingLevel: FieldRef<"Event", 'Float'>
    readonly timelineListGenerationDate: FieldRef<"Event", 'DateTime'>
    readonly timelineReviewDeadline: FieldRef<"Event", 'DateTime'>
    readonly timelineInvitationDate: FieldRef<"Event", 'DateTime'>
    readonly status: FieldRef<"Event", 'EventStatus'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
    readonly createdBy: FieldRef<"Event", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.donorLists
   */
  export type Event$donorListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventDonorList
     */
    select?: EventDonorListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventDonorListInclude<ExtArgs> | null
    where?: EventDonorListWhereInput
    orderBy?: EventDonorListOrderByWithRelationInput | EventDonorListOrderByWithRelationInput[]
    cursor?: EventDonorListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventDonorListScalarFieldEnum | EventDonorListScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EventDonorListScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    name: 'name',
    totalDonors: 'totalDonors',
    approved: 'approved',
    excluded: 'excluded',
    pending: 'pending',
    autoExcluded: 'autoExcluded',
    reviewStatus: 'reviewStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    generatedBy: 'generatedBy'
  };

  export type EventDonorListScalarFieldEnum = (typeof EventDonorListScalarFieldEnum)[keyof typeof EventDonorListScalarFieldEnum]


  export const EventDonorScalarFieldEnum: {
    id: 'id',
    donorListId: 'donorListId',
    donorId: 'donorId',
    status: 'status',
    excludeReason: 'excludeReason',
    reviewerId: 'reviewerId',
    reviewDate: 'reviewDate',
    comments: 'comments',
    autoExcluded: 'autoExcluded'
  };

  export type EventDonorScalarFieldEnum = (typeof EventDonorScalarFieldEnum)[keyof typeof EventDonorScalarFieldEnum]


  export const DonorScalarFieldEnum: {
    id: 'id',
    pmm: 'pmm',
    smm: 'smm',
    vmm: 'vmm',
    excluded: 'excluded',
    deceased: 'deceased',
    firstName: 'firstName',
    nickName: 'nickName',
    lastName: 'lastName',
    organizationName: 'organizationName',
    totalDonations: 'totalDonations',
    totalPledges: 'totalPledges',
    largestGift: 'largestGift',
    largestGiftAppeal: 'largestGiftAppeal',
    firstGiftDate: 'firstGiftDate',
    lastGiftDate: 'lastGiftDate',
    lastGiftAmount: 'lastGiftAmount',
    lastGiftRequest: 'lastGiftRequest',
    lastGiftAppeal: 'lastGiftAppeal',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    contactPhoneType: 'contactPhoneType',
    phoneRestrictions: 'phoneRestrictions',
    emailRestrictions: 'emailRestrictions',
    communicationRestrictions: 'communicationRestrictions',
    subscriptionEventsInPerson: 'subscriptionEventsInPerson',
    subscriptionEventsMagazine: 'subscriptionEventsMagazine',
    communicationPreference: 'communicationPreference',
    tags: 'tags'
  };

  export type DonorScalarFieldEnum = (typeof DonorScalarFieldEnum)[keyof typeof DonorScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    date: 'date',
    location: 'location',
    capacity: 'capacity',
    focus: 'focus',
    criteriaMinGivingLevel: 'criteriaMinGivingLevel',
    timelineListGenerationDate: 'timelineListGenerationDate',
    timelineReviewDeadline: 'timelineReviewDeadline',
    timelineInvitationDate: 'timelineInvitationDate',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'ReviewStatus'
   */
  export type EnumReviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReviewStatus'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DonorStatus'
   */
  export type EnumDonorStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DonorStatus'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'EventStatus'
   */
  export type EnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    generatedLists?: EventDonorListListRelationFilter
    createdEvents?: EventListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    generatedLists?: EventDonorListOrderByRelationAggregateInput
    createdEvents?: EventOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    generatedLists?: EventDonorListListRelationFilter
    createdEvents?: EventListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
  }

  export type EventDonorListWhereInput = {
    AND?: EventDonorListWhereInput | EventDonorListWhereInput[]
    OR?: EventDonorListWhereInput[]
    NOT?: EventDonorListWhereInput | EventDonorListWhereInput[]
    id?: IntFilter<"EventDonorList"> | number
    eventId?: IntFilter<"EventDonorList"> | number
    name?: StringFilter<"EventDonorList"> | string
    totalDonors?: IntFilter<"EventDonorList"> | number
    approved?: IntFilter<"EventDonorList"> | number
    excluded?: IntFilter<"EventDonorList"> | number
    pending?: IntFilter<"EventDonorList"> | number
    autoExcluded?: IntFilter<"EventDonorList"> | number
    reviewStatus?: EnumReviewStatusFilter<"EventDonorList"> | $Enums.ReviewStatus
    createdAt?: DateTimeFilter<"EventDonorList"> | Date | string
    updatedAt?: DateTimeFilter<"EventDonorList"> | Date | string
    generatedBy?: IntFilter<"EventDonorList"> | number
    event?: XOR<EventRelationFilter, EventWhereInput>
    generator?: XOR<UserRelationFilter, UserWhereInput>
    eventDonors?: EventDonorListRelationFilter
  }

  export type EventDonorListOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    totalDonors?: SortOrder
    approved?: SortOrder
    excluded?: SortOrder
    pending?: SortOrder
    autoExcluded?: SortOrder
    reviewStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    generatedBy?: SortOrder
    event?: EventOrderByWithRelationInput
    generator?: UserOrderByWithRelationInput
    eventDonors?: EventDonorOrderByRelationAggregateInput
  }

  export type EventDonorListWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventDonorListWhereInput | EventDonorListWhereInput[]
    OR?: EventDonorListWhereInput[]
    NOT?: EventDonorListWhereInput | EventDonorListWhereInput[]
    eventId?: IntFilter<"EventDonorList"> | number
    name?: StringFilter<"EventDonorList"> | string
    totalDonors?: IntFilter<"EventDonorList"> | number
    approved?: IntFilter<"EventDonorList"> | number
    excluded?: IntFilter<"EventDonorList"> | number
    pending?: IntFilter<"EventDonorList"> | number
    autoExcluded?: IntFilter<"EventDonorList"> | number
    reviewStatus?: EnumReviewStatusFilter<"EventDonorList"> | $Enums.ReviewStatus
    createdAt?: DateTimeFilter<"EventDonorList"> | Date | string
    updatedAt?: DateTimeFilter<"EventDonorList"> | Date | string
    generatedBy?: IntFilter<"EventDonorList"> | number
    event?: XOR<EventRelationFilter, EventWhereInput>
    generator?: XOR<UserRelationFilter, UserWhereInput>
    eventDonors?: EventDonorListRelationFilter
  }, "id">

  export type EventDonorListOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    totalDonors?: SortOrder
    approved?: SortOrder
    excluded?: SortOrder
    pending?: SortOrder
    autoExcluded?: SortOrder
    reviewStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    generatedBy?: SortOrder
    _count?: EventDonorListCountOrderByAggregateInput
    _avg?: EventDonorListAvgOrderByAggregateInput
    _max?: EventDonorListMaxOrderByAggregateInput
    _min?: EventDonorListMinOrderByAggregateInput
    _sum?: EventDonorListSumOrderByAggregateInput
  }

  export type EventDonorListScalarWhereWithAggregatesInput = {
    AND?: EventDonorListScalarWhereWithAggregatesInput | EventDonorListScalarWhereWithAggregatesInput[]
    OR?: EventDonorListScalarWhereWithAggregatesInput[]
    NOT?: EventDonorListScalarWhereWithAggregatesInput | EventDonorListScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EventDonorList"> | number
    eventId?: IntWithAggregatesFilter<"EventDonorList"> | number
    name?: StringWithAggregatesFilter<"EventDonorList"> | string
    totalDonors?: IntWithAggregatesFilter<"EventDonorList"> | number
    approved?: IntWithAggregatesFilter<"EventDonorList"> | number
    excluded?: IntWithAggregatesFilter<"EventDonorList"> | number
    pending?: IntWithAggregatesFilter<"EventDonorList"> | number
    autoExcluded?: IntWithAggregatesFilter<"EventDonorList"> | number
    reviewStatus?: EnumReviewStatusWithAggregatesFilter<"EventDonorList"> | $Enums.ReviewStatus
    createdAt?: DateTimeWithAggregatesFilter<"EventDonorList"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EventDonorList"> | Date | string
    generatedBy?: IntWithAggregatesFilter<"EventDonorList"> | number
  }

  export type EventDonorWhereInput = {
    AND?: EventDonorWhereInput | EventDonorWhereInput[]
    OR?: EventDonorWhereInput[]
    NOT?: EventDonorWhereInput | EventDonorWhereInput[]
    id?: IntFilter<"EventDonor"> | number
    donorListId?: IntFilter<"EventDonor"> | number
    donorId?: IntFilter<"EventDonor"> | number
    status?: EnumDonorStatusFilter<"EventDonor"> | $Enums.DonorStatus
    excludeReason?: StringNullableFilter<"EventDonor"> | string | null
    reviewerId?: IntNullableFilter<"EventDonor"> | number | null
    reviewDate?: DateTimeNullableFilter<"EventDonor"> | Date | string | null
    comments?: StringNullableFilter<"EventDonor"> | string | null
    autoExcluded?: BoolFilter<"EventDonor"> | boolean
    donorList?: XOR<EventDonorListRelationFilter, EventDonorListWhereInput>
    donor?: XOR<DonorRelationFilter, DonorWhereInput>
  }

  export type EventDonorOrderByWithRelationInput = {
    id?: SortOrder
    donorListId?: SortOrder
    donorId?: SortOrder
    status?: SortOrder
    excludeReason?: SortOrderInput | SortOrder
    reviewerId?: SortOrderInput | SortOrder
    reviewDate?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    autoExcluded?: SortOrder
    donorList?: EventDonorListOrderByWithRelationInput
    donor?: DonorOrderByWithRelationInput
  }

  export type EventDonorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventDonorWhereInput | EventDonorWhereInput[]
    OR?: EventDonorWhereInput[]
    NOT?: EventDonorWhereInput | EventDonorWhereInput[]
    donorListId?: IntFilter<"EventDonor"> | number
    donorId?: IntFilter<"EventDonor"> | number
    status?: EnumDonorStatusFilter<"EventDonor"> | $Enums.DonorStatus
    excludeReason?: StringNullableFilter<"EventDonor"> | string | null
    reviewerId?: IntNullableFilter<"EventDonor"> | number | null
    reviewDate?: DateTimeNullableFilter<"EventDonor"> | Date | string | null
    comments?: StringNullableFilter<"EventDonor"> | string | null
    autoExcluded?: BoolFilter<"EventDonor"> | boolean
    donorList?: XOR<EventDonorListRelationFilter, EventDonorListWhereInput>
    donor?: XOR<DonorRelationFilter, DonorWhereInput>
  }, "id">

  export type EventDonorOrderByWithAggregationInput = {
    id?: SortOrder
    donorListId?: SortOrder
    donorId?: SortOrder
    status?: SortOrder
    excludeReason?: SortOrderInput | SortOrder
    reviewerId?: SortOrderInput | SortOrder
    reviewDate?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    autoExcluded?: SortOrder
    _count?: EventDonorCountOrderByAggregateInput
    _avg?: EventDonorAvgOrderByAggregateInput
    _max?: EventDonorMaxOrderByAggregateInput
    _min?: EventDonorMinOrderByAggregateInput
    _sum?: EventDonorSumOrderByAggregateInput
  }

  export type EventDonorScalarWhereWithAggregatesInput = {
    AND?: EventDonorScalarWhereWithAggregatesInput | EventDonorScalarWhereWithAggregatesInput[]
    OR?: EventDonorScalarWhereWithAggregatesInput[]
    NOT?: EventDonorScalarWhereWithAggregatesInput | EventDonorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EventDonor"> | number
    donorListId?: IntWithAggregatesFilter<"EventDonor"> | number
    donorId?: IntWithAggregatesFilter<"EventDonor"> | number
    status?: EnumDonorStatusWithAggregatesFilter<"EventDonor"> | $Enums.DonorStatus
    excludeReason?: StringNullableWithAggregatesFilter<"EventDonor"> | string | null
    reviewerId?: IntNullableWithAggregatesFilter<"EventDonor"> | number | null
    reviewDate?: DateTimeNullableWithAggregatesFilter<"EventDonor"> | Date | string | null
    comments?: StringNullableWithAggregatesFilter<"EventDonor"> | string | null
    autoExcluded?: BoolWithAggregatesFilter<"EventDonor"> | boolean
  }

  export type DonorWhereInput = {
    AND?: DonorWhereInput | DonorWhereInput[]
    OR?: DonorWhereInput[]
    NOT?: DonorWhereInput | DonorWhereInput[]
    id?: IntFilter<"Donor"> | number
    pmm?: StringNullableFilter<"Donor"> | string | null
    smm?: StringNullableFilter<"Donor"> | string | null
    vmm?: StringNullableFilter<"Donor"> | string | null
    excluded?: BoolFilter<"Donor"> | boolean
    deceased?: BoolFilter<"Donor"> | boolean
    firstName?: StringNullableFilter<"Donor"> | string | null
    nickName?: StringNullableFilter<"Donor"> | string | null
    lastName?: StringNullableFilter<"Donor"> | string | null
    organizationName?: StringNullableFilter<"Donor"> | string | null
    totalDonations?: FloatFilter<"Donor"> | number
    totalPledges?: FloatFilter<"Donor"> | number
    largestGift?: FloatFilter<"Donor"> | number
    largestGiftAppeal?: StringNullableFilter<"Donor"> | string | null
    firstGiftDate?: DateTimeNullableFilter<"Donor"> | Date | string | null
    lastGiftDate?: DateTimeNullableFilter<"Donor"> | Date | string | null
    lastGiftAmount?: FloatFilter<"Donor"> | number
    lastGiftRequest?: StringNullableFilter<"Donor"> | string | null
    lastGiftAppeal?: StringNullableFilter<"Donor"> | string | null
    addressLine1?: StringNullableFilter<"Donor"> | string | null
    addressLine2?: StringNullableFilter<"Donor"> | string | null
    city?: StringNullableFilter<"Donor"> | string | null
    contactPhoneType?: StringNullableFilter<"Donor"> | string | null
    phoneRestrictions?: StringNullableFilter<"Donor"> | string | null
    emailRestrictions?: StringNullableFilter<"Donor"> | string | null
    communicationRestrictions?: StringNullableFilter<"Donor"> | string | null
    subscriptionEventsInPerson?: StringNullableFilter<"Donor"> | string | null
    subscriptionEventsMagazine?: StringNullableFilter<"Donor"> | string | null
    communicationPreference?: StringNullableFilter<"Donor"> | string | null
    tags?: StringNullableFilter<"Donor"> | string | null
    eventDonors?: EventDonorListRelationFilter
  }

  export type DonorOrderByWithRelationInput = {
    id?: SortOrder
    pmm?: SortOrderInput | SortOrder
    smm?: SortOrderInput | SortOrder
    vmm?: SortOrderInput | SortOrder
    excluded?: SortOrder
    deceased?: SortOrder
    firstName?: SortOrderInput | SortOrder
    nickName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    organizationName?: SortOrderInput | SortOrder
    totalDonations?: SortOrder
    totalPledges?: SortOrder
    largestGift?: SortOrder
    largestGiftAppeal?: SortOrderInput | SortOrder
    firstGiftDate?: SortOrderInput | SortOrder
    lastGiftDate?: SortOrderInput | SortOrder
    lastGiftAmount?: SortOrder
    lastGiftRequest?: SortOrderInput | SortOrder
    lastGiftAppeal?: SortOrderInput | SortOrder
    addressLine1?: SortOrderInput | SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    contactPhoneType?: SortOrderInput | SortOrder
    phoneRestrictions?: SortOrderInput | SortOrder
    emailRestrictions?: SortOrderInput | SortOrder
    communicationRestrictions?: SortOrderInput | SortOrder
    subscriptionEventsInPerson?: SortOrderInput | SortOrder
    subscriptionEventsMagazine?: SortOrderInput | SortOrder
    communicationPreference?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    eventDonors?: EventDonorOrderByRelationAggregateInput
  }

  export type DonorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DonorWhereInput | DonorWhereInput[]
    OR?: DonorWhereInput[]
    NOT?: DonorWhereInput | DonorWhereInput[]
    pmm?: StringNullableFilter<"Donor"> | string | null
    smm?: StringNullableFilter<"Donor"> | string | null
    vmm?: StringNullableFilter<"Donor"> | string | null
    excluded?: BoolFilter<"Donor"> | boolean
    deceased?: BoolFilter<"Donor"> | boolean
    firstName?: StringNullableFilter<"Donor"> | string | null
    nickName?: StringNullableFilter<"Donor"> | string | null
    lastName?: StringNullableFilter<"Donor"> | string | null
    organizationName?: StringNullableFilter<"Donor"> | string | null
    totalDonations?: FloatFilter<"Donor"> | number
    totalPledges?: FloatFilter<"Donor"> | number
    largestGift?: FloatFilter<"Donor"> | number
    largestGiftAppeal?: StringNullableFilter<"Donor"> | string | null
    firstGiftDate?: DateTimeNullableFilter<"Donor"> | Date | string | null
    lastGiftDate?: DateTimeNullableFilter<"Donor"> | Date | string | null
    lastGiftAmount?: FloatFilter<"Donor"> | number
    lastGiftRequest?: StringNullableFilter<"Donor"> | string | null
    lastGiftAppeal?: StringNullableFilter<"Donor"> | string | null
    addressLine1?: StringNullableFilter<"Donor"> | string | null
    addressLine2?: StringNullableFilter<"Donor"> | string | null
    city?: StringNullableFilter<"Donor"> | string | null
    contactPhoneType?: StringNullableFilter<"Donor"> | string | null
    phoneRestrictions?: StringNullableFilter<"Donor"> | string | null
    emailRestrictions?: StringNullableFilter<"Donor"> | string | null
    communicationRestrictions?: StringNullableFilter<"Donor"> | string | null
    subscriptionEventsInPerson?: StringNullableFilter<"Donor"> | string | null
    subscriptionEventsMagazine?: StringNullableFilter<"Donor"> | string | null
    communicationPreference?: StringNullableFilter<"Donor"> | string | null
    tags?: StringNullableFilter<"Donor"> | string | null
    eventDonors?: EventDonorListRelationFilter
  }, "id">

  export type DonorOrderByWithAggregationInput = {
    id?: SortOrder
    pmm?: SortOrderInput | SortOrder
    smm?: SortOrderInput | SortOrder
    vmm?: SortOrderInput | SortOrder
    excluded?: SortOrder
    deceased?: SortOrder
    firstName?: SortOrderInput | SortOrder
    nickName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    organizationName?: SortOrderInput | SortOrder
    totalDonations?: SortOrder
    totalPledges?: SortOrder
    largestGift?: SortOrder
    largestGiftAppeal?: SortOrderInput | SortOrder
    firstGiftDate?: SortOrderInput | SortOrder
    lastGiftDate?: SortOrderInput | SortOrder
    lastGiftAmount?: SortOrder
    lastGiftRequest?: SortOrderInput | SortOrder
    lastGiftAppeal?: SortOrderInput | SortOrder
    addressLine1?: SortOrderInput | SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    contactPhoneType?: SortOrderInput | SortOrder
    phoneRestrictions?: SortOrderInput | SortOrder
    emailRestrictions?: SortOrderInput | SortOrder
    communicationRestrictions?: SortOrderInput | SortOrder
    subscriptionEventsInPerson?: SortOrderInput | SortOrder
    subscriptionEventsMagazine?: SortOrderInput | SortOrder
    communicationPreference?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    _count?: DonorCountOrderByAggregateInput
    _avg?: DonorAvgOrderByAggregateInput
    _max?: DonorMaxOrderByAggregateInput
    _min?: DonorMinOrderByAggregateInput
    _sum?: DonorSumOrderByAggregateInput
  }

  export type DonorScalarWhereWithAggregatesInput = {
    AND?: DonorScalarWhereWithAggregatesInput | DonorScalarWhereWithAggregatesInput[]
    OR?: DonorScalarWhereWithAggregatesInput[]
    NOT?: DonorScalarWhereWithAggregatesInput | DonorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Donor"> | number
    pmm?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    smm?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    vmm?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    excluded?: BoolWithAggregatesFilter<"Donor"> | boolean
    deceased?: BoolWithAggregatesFilter<"Donor"> | boolean
    firstName?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    nickName?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    organizationName?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    totalDonations?: FloatWithAggregatesFilter<"Donor"> | number
    totalPledges?: FloatWithAggregatesFilter<"Donor"> | number
    largestGift?: FloatWithAggregatesFilter<"Donor"> | number
    largestGiftAppeal?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    firstGiftDate?: DateTimeNullableWithAggregatesFilter<"Donor"> | Date | string | null
    lastGiftDate?: DateTimeNullableWithAggregatesFilter<"Donor"> | Date | string | null
    lastGiftAmount?: FloatWithAggregatesFilter<"Donor"> | number
    lastGiftRequest?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    lastGiftAppeal?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    addressLine1?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    addressLine2?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    city?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    contactPhoneType?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    phoneRestrictions?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    emailRestrictions?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    communicationRestrictions?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    subscriptionEventsInPerson?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    subscriptionEventsMagazine?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    communicationPreference?: StringNullableWithAggregatesFilter<"Donor"> | string | null
    tags?: StringNullableWithAggregatesFilter<"Donor"> | string | null
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    type?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    location?: StringFilter<"Event"> | string
    capacity?: IntFilter<"Event"> | number
    focus?: StringNullableFilter<"Event"> | string | null
    criteriaMinGivingLevel?: FloatFilter<"Event"> | number
    timelineListGenerationDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    timelineReviewDeadline?: DateTimeNullableFilter<"Event"> | Date | string | null
    timelineInvitationDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    createdBy?: IntFilter<"Event"> | number
    creator?: XOR<UserRelationFilter, UserWhereInput>
    donorLists?: EventDonorListListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    date?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    focus?: SortOrderInput | SortOrder
    criteriaMinGivingLevel?: SortOrder
    timelineListGenerationDate?: SortOrderInput | SortOrder
    timelineReviewDeadline?: SortOrderInput | SortOrder
    timelineInvitationDate?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    creator?: UserOrderByWithRelationInput
    donorLists?: EventDonorListOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    name?: StringFilter<"Event"> | string
    type?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    location?: StringFilter<"Event"> | string
    capacity?: IntFilter<"Event"> | number
    focus?: StringNullableFilter<"Event"> | string | null
    criteriaMinGivingLevel?: FloatFilter<"Event"> | number
    timelineListGenerationDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    timelineReviewDeadline?: DateTimeNullableFilter<"Event"> | Date | string | null
    timelineInvitationDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    createdBy?: IntFilter<"Event"> | number
    creator?: XOR<UserRelationFilter, UserWhereInput>
    donorLists?: EventDonorListListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    date?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    focus?: SortOrderInput | SortOrder
    criteriaMinGivingLevel?: SortOrder
    timelineListGenerationDate?: SortOrderInput | SortOrder
    timelineReviewDeadline?: SortOrderInput | SortOrder
    timelineInvitationDate?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    name?: StringWithAggregatesFilter<"Event"> | string
    type?: StringWithAggregatesFilter<"Event"> | string
    date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    location?: StringWithAggregatesFilter<"Event"> | string
    capacity?: IntWithAggregatesFilter<"Event"> | number
    focus?: StringNullableWithAggregatesFilter<"Event"> | string | null
    criteriaMinGivingLevel?: FloatWithAggregatesFilter<"Event"> | number
    timelineListGenerationDate?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
    timelineReviewDeadline?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
    timelineInvitationDate?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
    status?: EnumEventStatusWithAggregatesFilter<"Event"> | $Enums.EventStatus
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    createdBy?: IntWithAggregatesFilter<"Event"> | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    generatedLists?: EventDonorListCreateNestedManyWithoutGeneratorInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    generatedLists?: EventDonorListUncheckedCreateNestedManyWithoutGeneratorInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    generatedLists?: EventDonorListUpdateManyWithoutGeneratorNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    generatedLists?: EventDonorListUncheckedUpdateManyWithoutGeneratorNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type EventDonorListCreateInput = {
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutDonorListsInput
    generator: UserCreateNestedOneWithoutGeneratedListsInput
    eventDonors?: EventDonorCreateNestedManyWithoutDonorListInput
  }

  export type EventDonorListUncheckedCreateInput = {
    id?: number
    eventId: number
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    generatedBy: number
    eventDonors?: EventDonorUncheckedCreateNestedManyWithoutDonorListInput
  }

  export type EventDonorListUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutDonorListsNestedInput
    generator?: UserUpdateOneRequiredWithoutGeneratedListsNestedInput
    eventDonors?: EventDonorUpdateManyWithoutDonorListNestedInput
  }

  export type EventDonorListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: IntFieldUpdateOperationsInput | number
    eventDonors?: EventDonorUncheckedUpdateManyWithoutDonorListNestedInput
  }

  export type EventDonorListCreateManyInput = {
    id?: number
    eventId: number
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    generatedBy: number
  }

  export type EventDonorListUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventDonorListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: IntFieldUpdateOperationsInput | number
  }

  export type EventDonorCreateInput = {
    status: $Enums.DonorStatus
    excludeReason?: string | null
    reviewerId?: number | null
    reviewDate?: Date | string | null
    comments?: string | null
    autoExcluded?: boolean
    donorList: EventDonorListCreateNestedOneWithoutEventDonorsInput
    donor: DonorCreateNestedOneWithoutEventDonorsInput
  }

  export type EventDonorUncheckedCreateInput = {
    id?: number
    donorListId: number
    donorId: number
    status: $Enums.DonorStatus
    excludeReason?: string | null
    reviewerId?: number | null
    reviewDate?: Date | string | null
    comments?: string | null
    autoExcluded?: boolean
  }

  export type EventDonorUpdateInput = {
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
    donorList?: EventDonorListUpdateOneRequiredWithoutEventDonorsNestedInput
    donor?: DonorUpdateOneRequiredWithoutEventDonorsNestedInput
  }

  export type EventDonorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    donorListId?: IntFieldUpdateOperationsInput | number
    donorId?: IntFieldUpdateOperationsInput | number
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventDonorCreateManyInput = {
    id?: number
    donorListId: number
    donorId: number
    status: $Enums.DonorStatus
    excludeReason?: string | null
    reviewerId?: number | null
    reviewDate?: Date | string | null
    comments?: string | null
    autoExcluded?: boolean
  }

  export type EventDonorUpdateManyMutationInput = {
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventDonorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    donorListId?: IntFieldUpdateOperationsInput | number
    donorId?: IntFieldUpdateOperationsInput | number
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DonorCreateInput = {
    pmm?: string | null
    smm?: string | null
    vmm?: string | null
    excluded?: boolean
    deceased?: boolean
    firstName?: string | null
    nickName?: string | null
    lastName?: string | null
    organizationName?: string | null
    totalDonations?: number
    totalPledges?: number
    largestGift?: number
    largestGiftAppeal?: string | null
    firstGiftDate?: Date | string | null
    lastGiftDate?: Date | string | null
    lastGiftAmount?: number
    lastGiftRequest?: string | null
    lastGiftAppeal?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    city?: string | null
    contactPhoneType?: string | null
    phoneRestrictions?: string | null
    emailRestrictions?: string | null
    communicationRestrictions?: string | null
    subscriptionEventsInPerson?: string | null
    subscriptionEventsMagazine?: string | null
    communicationPreference?: string | null
    tags?: string | null
    eventDonors?: EventDonorCreateNestedManyWithoutDonorInput
  }

  export type DonorUncheckedCreateInput = {
    id?: number
    pmm?: string | null
    smm?: string | null
    vmm?: string | null
    excluded?: boolean
    deceased?: boolean
    firstName?: string | null
    nickName?: string | null
    lastName?: string | null
    organizationName?: string | null
    totalDonations?: number
    totalPledges?: number
    largestGift?: number
    largestGiftAppeal?: string | null
    firstGiftDate?: Date | string | null
    lastGiftDate?: Date | string | null
    lastGiftAmount?: number
    lastGiftRequest?: string | null
    lastGiftAppeal?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    city?: string | null
    contactPhoneType?: string | null
    phoneRestrictions?: string | null
    emailRestrictions?: string | null
    communicationRestrictions?: string | null
    subscriptionEventsInPerson?: string | null
    subscriptionEventsMagazine?: string | null
    communicationPreference?: string | null
    tags?: string | null
    eventDonors?: EventDonorUncheckedCreateNestedManyWithoutDonorInput
  }

  export type DonorUpdateInput = {
    pmm?: NullableStringFieldUpdateOperationsInput | string | null
    smm?: NullableStringFieldUpdateOperationsInput | string | null
    vmm?: NullableStringFieldUpdateOperationsInput | string | null
    excluded?: BoolFieldUpdateOperationsInput | boolean
    deceased?: BoolFieldUpdateOperationsInput | boolean
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    nickName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    totalDonations?: FloatFieldUpdateOperationsInput | number
    totalPledges?: FloatFieldUpdateOperationsInput | number
    largestGift?: FloatFieldUpdateOperationsInput | number
    largestGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    firstGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftAmount?: FloatFieldUpdateOperationsInput | number
    lastGiftRequest?: NullableStringFieldUpdateOperationsInput | string | null
    lastGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhoneType?: NullableStringFieldUpdateOperationsInput | string | null
    phoneRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    emailRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    communicationRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsInPerson?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsMagazine?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreference?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    eventDonors?: EventDonorUpdateManyWithoutDonorNestedInput
  }

  export type DonorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pmm?: NullableStringFieldUpdateOperationsInput | string | null
    smm?: NullableStringFieldUpdateOperationsInput | string | null
    vmm?: NullableStringFieldUpdateOperationsInput | string | null
    excluded?: BoolFieldUpdateOperationsInput | boolean
    deceased?: BoolFieldUpdateOperationsInput | boolean
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    nickName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    totalDonations?: FloatFieldUpdateOperationsInput | number
    totalPledges?: FloatFieldUpdateOperationsInput | number
    largestGift?: FloatFieldUpdateOperationsInput | number
    largestGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    firstGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftAmount?: FloatFieldUpdateOperationsInput | number
    lastGiftRequest?: NullableStringFieldUpdateOperationsInput | string | null
    lastGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhoneType?: NullableStringFieldUpdateOperationsInput | string | null
    phoneRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    emailRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    communicationRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsInPerson?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsMagazine?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreference?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    eventDonors?: EventDonorUncheckedUpdateManyWithoutDonorNestedInput
  }

  export type DonorCreateManyInput = {
    id?: number
    pmm?: string | null
    smm?: string | null
    vmm?: string | null
    excluded?: boolean
    deceased?: boolean
    firstName?: string | null
    nickName?: string | null
    lastName?: string | null
    organizationName?: string | null
    totalDonations?: number
    totalPledges?: number
    largestGift?: number
    largestGiftAppeal?: string | null
    firstGiftDate?: Date | string | null
    lastGiftDate?: Date | string | null
    lastGiftAmount?: number
    lastGiftRequest?: string | null
    lastGiftAppeal?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    city?: string | null
    contactPhoneType?: string | null
    phoneRestrictions?: string | null
    emailRestrictions?: string | null
    communicationRestrictions?: string | null
    subscriptionEventsInPerson?: string | null
    subscriptionEventsMagazine?: string | null
    communicationPreference?: string | null
    tags?: string | null
  }

  export type DonorUpdateManyMutationInput = {
    pmm?: NullableStringFieldUpdateOperationsInput | string | null
    smm?: NullableStringFieldUpdateOperationsInput | string | null
    vmm?: NullableStringFieldUpdateOperationsInput | string | null
    excluded?: BoolFieldUpdateOperationsInput | boolean
    deceased?: BoolFieldUpdateOperationsInput | boolean
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    nickName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    totalDonations?: FloatFieldUpdateOperationsInput | number
    totalPledges?: FloatFieldUpdateOperationsInput | number
    largestGift?: FloatFieldUpdateOperationsInput | number
    largestGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    firstGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftAmount?: FloatFieldUpdateOperationsInput | number
    lastGiftRequest?: NullableStringFieldUpdateOperationsInput | string | null
    lastGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhoneType?: NullableStringFieldUpdateOperationsInput | string | null
    phoneRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    emailRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    communicationRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsInPerson?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsMagazine?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreference?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DonorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pmm?: NullableStringFieldUpdateOperationsInput | string | null
    smm?: NullableStringFieldUpdateOperationsInput | string | null
    vmm?: NullableStringFieldUpdateOperationsInput | string | null
    excluded?: BoolFieldUpdateOperationsInput | boolean
    deceased?: BoolFieldUpdateOperationsInput | boolean
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    nickName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    totalDonations?: FloatFieldUpdateOperationsInput | number
    totalPledges?: FloatFieldUpdateOperationsInput | number
    largestGift?: FloatFieldUpdateOperationsInput | number
    largestGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    firstGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftAmount?: FloatFieldUpdateOperationsInput | number
    lastGiftRequest?: NullableStringFieldUpdateOperationsInput | string | null
    lastGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhoneType?: NullableStringFieldUpdateOperationsInput | string | null
    phoneRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    emailRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    communicationRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsInPerson?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsMagazine?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreference?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventCreateInput = {
    name: string
    type: string
    date: Date | string
    location: string
    capacity?: number
    focus?: string | null
    criteriaMinGivingLevel?: number
    timelineListGenerationDate?: Date | string | null
    timelineReviewDeadline?: Date | string | null
    timelineInvitationDate?: Date | string | null
    status?: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedEventsInput
    donorLists?: EventDonorListCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    date: Date | string
    location: string
    capacity?: number
    focus?: string | null
    criteriaMinGivingLevel?: number
    timelineListGenerationDate?: Date | string | null
    timelineReviewDeadline?: Date | string | null
    timelineInvitationDate?: Date | string | null
    status?: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    donorLists?: EventDonorListUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    focus?: NullableStringFieldUpdateOperationsInput | string | null
    criteriaMinGivingLevel?: FloatFieldUpdateOperationsInput | number
    timelineListGenerationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineReviewDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineInvitationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
    donorLists?: EventDonorListUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    focus?: NullableStringFieldUpdateOperationsInput | string | null
    criteriaMinGivingLevel?: FloatFieldUpdateOperationsInput | number
    timelineListGenerationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineReviewDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineInvitationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    donorLists?: EventDonorListUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: number
    name: string
    type: string
    date: Date | string
    location: string
    capacity?: number
    focus?: string | null
    criteriaMinGivingLevel?: number
    timelineListGenerationDate?: Date | string | null
    timelineReviewDeadline?: Date | string | null
    timelineInvitationDate?: Date | string | null
    status?: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
  }

  export type EventUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    focus?: NullableStringFieldUpdateOperationsInput | string | null
    criteriaMinGivingLevel?: FloatFieldUpdateOperationsInput | number
    timelineListGenerationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineReviewDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineInvitationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    focus?: NullableStringFieldUpdateOperationsInput | string | null
    criteriaMinGivingLevel?: FloatFieldUpdateOperationsInput | number
    timelineListGenerationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineReviewDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineInvitationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EventDonorListListRelationFilter = {
    every?: EventDonorListWhereInput
    some?: EventDonorListWhereInput
    none?: EventDonorListWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type EventDonorListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumReviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[]
    notIn?: $Enums.ReviewStatus[]
    not?: NestedEnumReviewStatusFilter<$PrismaModel> | $Enums.ReviewStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EventRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EventDonorListRelationFilter = {
    every?: EventDonorWhereInput
    some?: EventDonorWhereInput
    none?: EventDonorWhereInput
  }

  export type EventDonorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventDonorListCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    totalDonors?: SortOrder
    approved?: SortOrder
    excluded?: SortOrder
    pending?: SortOrder
    autoExcluded?: SortOrder
    reviewStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    generatedBy?: SortOrder
  }

  export type EventDonorListAvgOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    totalDonors?: SortOrder
    approved?: SortOrder
    excluded?: SortOrder
    pending?: SortOrder
    autoExcluded?: SortOrder
    generatedBy?: SortOrder
  }

  export type EventDonorListMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    totalDonors?: SortOrder
    approved?: SortOrder
    excluded?: SortOrder
    pending?: SortOrder
    autoExcluded?: SortOrder
    reviewStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    generatedBy?: SortOrder
  }

  export type EventDonorListMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    totalDonors?: SortOrder
    approved?: SortOrder
    excluded?: SortOrder
    pending?: SortOrder
    autoExcluded?: SortOrder
    reviewStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    generatedBy?: SortOrder
  }

  export type EventDonorListSumOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    totalDonors?: SortOrder
    approved?: SortOrder
    excluded?: SortOrder
    pending?: SortOrder
    autoExcluded?: SortOrder
    generatedBy?: SortOrder
  }

  export type EnumReviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[]
    notIn?: $Enums.ReviewStatus[]
    not?: NestedEnumReviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewStatusFilter<$PrismaModel>
    _max?: NestedEnumReviewStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumDonorStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DonorStatus | EnumDonorStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DonorStatus[]
    notIn?: $Enums.DonorStatus[]
    not?: NestedEnumDonorStatusFilter<$PrismaModel> | $Enums.DonorStatus
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EventDonorListRelationFilter = {
    is?: EventDonorListWhereInput
    isNot?: EventDonorListWhereInput
  }

  export type DonorRelationFilter = {
    is?: DonorWhereInput
    isNot?: DonorWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EventDonorCountOrderByAggregateInput = {
    id?: SortOrder
    donorListId?: SortOrder
    donorId?: SortOrder
    status?: SortOrder
    excludeReason?: SortOrder
    reviewerId?: SortOrder
    reviewDate?: SortOrder
    comments?: SortOrder
    autoExcluded?: SortOrder
  }

  export type EventDonorAvgOrderByAggregateInput = {
    id?: SortOrder
    donorListId?: SortOrder
    donorId?: SortOrder
    reviewerId?: SortOrder
  }

  export type EventDonorMaxOrderByAggregateInput = {
    id?: SortOrder
    donorListId?: SortOrder
    donorId?: SortOrder
    status?: SortOrder
    excludeReason?: SortOrder
    reviewerId?: SortOrder
    reviewDate?: SortOrder
    comments?: SortOrder
    autoExcluded?: SortOrder
  }

  export type EventDonorMinOrderByAggregateInput = {
    id?: SortOrder
    donorListId?: SortOrder
    donorId?: SortOrder
    status?: SortOrder
    excludeReason?: SortOrder
    reviewerId?: SortOrder
    reviewDate?: SortOrder
    comments?: SortOrder
    autoExcluded?: SortOrder
  }

  export type EventDonorSumOrderByAggregateInput = {
    id?: SortOrder
    donorListId?: SortOrder
    donorId?: SortOrder
    reviewerId?: SortOrder
  }

  export type EnumDonorStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DonorStatus | EnumDonorStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DonorStatus[]
    notIn?: $Enums.DonorStatus[]
    not?: NestedEnumDonorStatusWithAggregatesFilter<$PrismaModel> | $Enums.DonorStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDonorStatusFilter<$PrismaModel>
    _max?: NestedEnumDonorStatusFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DonorCountOrderByAggregateInput = {
    id?: SortOrder
    pmm?: SortOrder
    smm?: SortOrder
    vmm?: SortOrder
    excluded?: SortOrder
    deceased?: SortOrder
    firstName?: SortOrder
    nickName?: SortOrder
    lastName?: SortOrder
    organizationName?: SortOrder
    totalDonations?: SortOrder
    totalPledges?: SortOrder
    largestGift?: SortOrder
    largestGiftAppeal?: SortOrder
    firstGiftDate?: SortOrder
    lastGiftDate?: SortOrder
    lastGiftAmount?: SortOrder
    lastGiftRequest?: SortOrder
    lastGiftAppeal?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    contactPhoneType?: SortOrder
    phoneRestrictions?: SortOrder
    emailRestrictions?: SortOrder
    communicationRestrictions?: SortOrder
    subscriptionEventsInPerson?: SortOrder
    subscriptionEventsMagazine?: SortOrder
    communicationPreference?: SortOrder
    tags?: SortOrder
  }

  export type DonorAvgOrderByAggregateInput = {
    id?: SortOrder
    totalDonations?: SortOrder
    totalPledges?: SortOrder
    largestGift?: SortOrder
    lastGiftAmount?: SortOrder
  }

  export type DonorMaxOrderByAggregateInput = {
    id?: SortOrder
    pmm?: SortOrder
    smm?: SortOrder
    vmm?: SortOrder
    excluded?: SortOrder
    deceased?: SortOrder
    firstName?: SortOrder
    nickName?: SortOrder
    lastName?: SortOrder
    organizationName?: SortOrder
    totalDonations?: SortOrder
    totalPledges?: SortOrder
    largestGift?: SortOrder
    largestGiftAppeal?: SortOrder
    firstGiftDate?: SortOrder
    lastGiftDate?: SortOrder
    lastGiftAmount?: SortOrder
    lastGiftRequest?: SortOrder
    lastGiftAppeal?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    contactPhoneType?: SortOrder
    phoneRestrictions?: SortOrder
    emailRestrictions?: SortOrder
    communicationRestrictions?: SortOrder
    subscriptionEventsInPerson?: SortOrder
    subscriptionEventsMagazine?: SortOrder
    communicationPreference?: SortOrder
    tags?: SortOrder
  }

  export type DonorMinOrderByAggregateInput = {
    id?: SortOrder
    pmm?: SortOrder
    smm?: SortOrder
    vmm?: SortOrder
    excluded?: SortOrder
    deceased?: SortOrder
    firstName?: SortOrder
    nickName?: SortOrder
    lastName?: SortOrder
    organizationName?: SortOrder
    totalDonations?: SortOrder
    totalPledges?: SortOrder
    largestGift?: SortOrder
    largestGiftAppeal?: SortOrder
    firstGiftDate?: SortOrder
    lastGiftDate?: SortOrder
    lastGiftAmount?: SortOrder
    lastGiftRequest?: SortOrder
    lastGiftAppeal?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    contactPhoneType?: SortOrder
    phoneRestrictions?: SortOrder
    emailRestrictions?: SortOrder
    communicationRestrictions?: SortOrder
    subscriptionEventsInPerson?: SortOrder
    subscriptionEventsMagazine?: SortOrder
    communicationPreference?: SortOrder
    tags?: SortOrder
  }

  export type DonorSumOrderByAggregateInput = {
    id?: SortOrder
    totalDonations?: SortOrder
    totalPledges?: SortOrder
    largestGift?: SortOrder
    lastGiftAmount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[]
    notIn?: $Enums.EventStatus[]
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    date?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    focus?: SortOrder
    criteriaMinGivingLevel?: SortOrder
    timelineListGenerationDate?: SortOrder
    timelineReviewDeadline?: SortOrder
    timelineInvitationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
    criteriaMinGivingLevel?: SortOrder
    createdBy?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    date?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    focus?: SortOrder
    criteriaMinGivingLevel?: SortOrder
    timelineListGenerationDate?: SortOrder
    timelineReviewDeadline?: SortOrder
    timelineInvitationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    date?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    focus?: SortOrder
    criteriaMinGivingLevel?: SortOrder
    timelineListGenerationDate?: SortOrder
    timelineReviewDeadline?: SortOrder
    timelineInvitationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
    criteriaMinGivingLevel?: SortOrder
    createdBy?: SortOrder
  }

  export type EnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[]
    notIn?: $Enums.EventStatus[]
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type EventDonorListCreateNestedManyWithoutGeneratorInput = {
    create?: XOR<EventDonorListCreateWithoutGeneratorInput, EventDonorListUncheckedCreateWithoutGeneratorInput> | EventDonorListCreateWithoutGeneratorInput[] | EventDonorListUncheckedCreateWithoutGeneratorInput[]
    connectOrCreate?: EventDonorListCreateOrConnectWithoutGeneratorInput | EventDonorListCreateOrConnectWithoutGeneratorInput[]
    createMany?: EventDonorListCreateManyGeneratorInputEnvelope
    connect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutCreatorInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventDonorListUncheckedCreateNestedManyWithoutGeneratorInput = {
    create?: XOR<EventDonorListCreateWithoutGeneratorInput, EventDonorListUncheckedCreateWithoutGeneratorInput> | EventDonorListCreateWithoutGeneratorInput[] | EventDonorListUncheckedCreateWithoutGeneratorInput[]
    connectOrCreate?: EventDonorListCreateOrConnectWithoutGeneratorInput | EventDonorListCreateOrConnectWithoutGeneratorInput[]
    createMany?: EventDonorListCreateManyGeneratorInputEnvelope
    connect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EventDonorListUpdateManyWithoutGeneratorNestedInput = {
    create?: XOR<EventDonorListCreateWithoutGeneratorInput, EventDonorListUncheckedCreateWithoutGeneratorInput> | EventDonorListCreateWithoutGeneratorInput[] | EventDonorListUncheckedCreateWithoutGeneratorInput[]
    connectOrCreate?: EventDonorListCreateOrConnectWithoutGeneratorInput | EventDonorListCreateOrConnectWithoutGeneratorInput[]
    upsert?: EventDonorListUpsertWithWhereUniqueWithoutGeneratorInput | EventDonorListUpsertWithWhereUniqueWithoutGeneratorInput[]
    createMany?: EventDonorListCreateManyGeneratorInputEnvelope
    set?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    disconnect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    delete?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    connect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    update?: EventDonorListUpdateWithWhereUniqueWithoutGeneratorInput | EventDonorListUpdateWithWhereUniqueWithoutGeneratorInput[]
    updateMany?: EventDonorListUpdateManyWithWhereWithoutGeneratorInput | EventDonorListUpdateManyWithWhereWithoutGeneratorInput[]
    deleteMany?: EventDonorListScalarWhereInput | EventDonorListScalarWhereInput[]
  }

  export type EventUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatorInput | EventUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatorInput | EventUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatorInput | EventUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventDonorListUncheckedUpdateManyWithoutGeneratorNestedInput = {
    create?: XOR<EventDonorListCreateWithoutGeneratorInput, EventDonorListUncheckedCreateWithoutGeneratorInput> | EventDonorListCreateWithoutGeneratorInput[] | EventDonorListUncheckedCreateWithoutGeneratorInput[]
    connectOrCreate?: EventDonorListCreateOrConnectWithoutGeneratorInput | EventDonorListCreateOrConnectWithoutGeneratorInput[]
    upsert?: EventDonorListUpsertWithWhereUniqueWithoutGeneratorInput | EventDonorListUpsertWithWhereUniqueWithoutGeneratorInput[]
    createMany?: EventDonorListCreateManyGeneratorInputEnvelope
    set?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    disconnect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    delete?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    connect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    update?: EventDonorListUpdateWithWhereUniqueWithoutGeneratorInput | EventDonorListUpdateWithWhereUniqueWithoutGeneratorInput[]
    updateMany?: EventDonorListUpdateManyWithWhereWithoutGeneratorInput | EventDonorListUpdateManyWithWhereWithoutGeneratorInput[]
    deleteMany?: EventDonorListScalarWhereInput | EventDonorListScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatorInput | EventUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatorInput | EventUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatorInput | EventUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutDonorListsInput = {
    create?: XOR<EventCreateWithoutDonorListsInput, EventUncheckedCreateWithoutDonorListsInput>
    connectOrCreate?: EventCreateOrConnectWithoutDonorListsInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGeneratedListsInput = {
    create?: XOR<UserCreateWithoutGeneratedListsInput, UserUncheckedCreateWithoutGeneratedListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGeneratedListsInput
    connect?: UserWhereUniqueInput
  }

  export type EventDonorCreateNestedManyWithoutDonorListInput = {
    create?: XOR<EventDonorCreateWithoutDonorListInput, EventDonorUncheckedCreateWithoutDonorListInput> | EventDonorCreateWithoutDonorListInput[] | EventDonorUncheckedCreateWithoutDonorListInput[]
    connectOrCreate?: EventDonorCreateOrConnectWithoutDonorListInput | EventDonorCreateOrConnectWithoutDonorListInput[]
    createMany?: EventDonorCreateManyDonorListInputEnvelope
    connect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
  }

  export type EventDonorUncheckedCreateNestedManyWithoutDonorListInput = {
    create?: XOR<EventDonorCreateWithoutDonorListInput, EventDonorUncheckedCreateWithoutDonorListInput> | EventDonorCreateWithoutDonorListInput[] | EventDonorUncheckedCreateWithoutDonorListInput[]
    connectOrCreate?: EventDonorCreateOrConnectWithoutDonorListInput | EventDonorCreateOrConnectWithoutDonorListInput[]
    createMany?: EventDonorCreateManyDonorListInputEnvelope
    connect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
  }

  export type EnumReviewStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReviewStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EventUpdateOneRequiredWithoutDonorListsNestedInput = {
    create?: XOR<EventCreateWithoutDonorListsInput, EventUncheckedCreateWithoutDonorListsInput>
    connectOrCreate?: EventCreateOrConnectWithoutDonorListsInput
    upsert?: EventUpsertWithoutDonorListsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutDonorListsInput, EventUpdateWithoutDonorListsInput>, EventUncheckedUpdateWithoutDonorListsInput>
  }

  export type UserUpdateOneRequiredWithoutGeneratedListsNestedInput = {
    create?: XOR<UserCreateWithoutGeneratedListsInput, UserUncheckedCreateWithoutGeneratedListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGeneratedListsInput
    upsert?: UserUpsertWithoutGeneratedListsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGeneratedListsInput, UserUpdateWithoutGeneratedListsInput>, UserUncheckedUpdateWithoutGeneratedListsInput>
  }

  export type EventDonorUpdateManyWithoutDonorListNestedInput = {
    create?: XOR<EventDonorCreateWithoutDonorListInput, EventDonorUncheckedCreateWithoutDonorListInput> | EventDonorCreateWithoutDonorListInput[] | EventDonorUncheckedCreateWithoutDonorListInput[]
    connectOrCreate?: EventDonorCreateOrConnectWithoutDonorListInput | EventDonorCreateOrConnectWithoutDonorListInput[]
    upsert?: EventDonorUpsertWithWhereUniqueWithoutDonorListInput | EventDonorUpsertWithWhereUniqueWithoutDonorListInput[]
    createMany?: EventDonorCreateManyDonorListInputEnvelope
    set?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    disconnect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    delete?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    connect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    update?: EventDonorUpdateWithWhereUniqueWithoutDonorListInput | EventDonorUpdateWithWhereUniqueWithoutDonorListInput[]
    updateMany?: EventDonorUpdateManyWithWhereWithoutDonorListInput | EventDonorUpdateManyWithWhereWithoutDonorListInput[]
    deleteMany?: EventDonorScalarWhereInput | EventDonorScalarWhereInput[]
  }

  export type EventDonorUncheckedUpdateManyWithoutDonorListNestedInput = {
    create?: XOR<EventDonorCreateWithoutDonorListInput, EventDonorUncheckedCreateWithoutDonorListInput> | EventDonorCreateWithoutDonorListInput[] | EventDonorUncheckedCreateWithoutDonorListInput[]
    connectOrCreate?: EventDonorCreateOrConnectWithoutDonorListInput | EventDonorCreateOrConnectWithoutDonorListInput[]
    upsert?: EventDonorUpsertWithWhereUniqueWithoutDonorListInput | EventDonorUpsertWithWhereUniqueWithoutDonorListInput[]
    createMany?: EventDonorCreateManyDonorListInputEnvelope
    set?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    disconnect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    delete?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    connect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    update?: EventDonorUpdateWithWhereUniqueWithoutDonorListInput | EventDonorUpdateWithWhereUniqueWithoutDonorListInput[]
    updateMany?: EventDonorUpdateManyWithWhereWithoutDonorListInput | EventDonorUpdateManyWithWhereWithoutDonorListInput[]
    deleteMany?: EventDonorScalarWhereInput | EventDonorScalarWhereInput[]
  }

  export type EventDonorListCreateNestedOneWithoutEventDonorsInput = {
    create?: XOR<EventDonorListCreateWithoutEventDonorsInput, EventDonorListUncheckedCreateWithoutEventDonorsInput>
    connectOrCreate?: EventDonorListCreateOrConnectWithoutEventDonorsInput
    connect?: EventDonorListWhereUniqueInput
  }

  export type DonorCreateNestedOneWithoutEventDonorsInput = {
    create?: XOR<DonorCreateWithoutEventDonorsInput, DonorUncheckedCreateWithoutEventDonorsInput>
    connectOrCreate?: DonorCreateOrConnectWithoutEventDonorsInput
    connect?: DonorWhereUniqueInput
  }

  export type EnumDonorStatusFieldUpdateOperationsInput = {
    set?: $Enums.DonorStatus
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EventDonorListUpdateOneRequiredWithoutEventDonorsNestedInput = {
    create?: XOR<EventDonorListCreateWithoutEventDonorsInput, EventDonorListUncheckedCreateWithoutEventDonorsInput>
    connectOrCreate?: EventDonorListCreateOrConnectWithoutEventDonorsInput
    upsert?: EventDonorListUpsertWithoutEventDonorsInput
    connect?: EventDonorListWhereUniqueInput
    update?: XOR<XOR<EventDonorListUpdateToOneWithWhereWithoutEventDonorsInput, EventDonorListUpdateWithoutEventDonorsInput>, EventDonorListUncheckedUpdateWithoutEventDonorsInput>
  }

  export type DonorUpdateOneRequiredWithoutEventDonorsNestedInput = {
    create?: XOR<DonorCreateWithoutEventDonorsInput, DonorUncheckedCreateWithoutEventDonorsInput>
    connectOrCreate?: DonorCreateOrConnectWithoutEventDonorsInput
    upsert?: DonorUpsertWithoutEventDonorsInput
    connect?: DonorWhereUniqueInput
    update?: XOR<XOR<DonorUpdateToOneWithWhereWithoutEventDonorsInput, DonorUpdateWithoutEventDonorsInput>, DonorUncheckedUpdateWithoutEventDonorsInput>
  }

  export type EventDonorCreateNestedManyWithoutDonorInput = {
    create?: XOR<EventDonorCreateWithoutDonorInput, EventDonorUncheckedCreateWithoutDonorInput> | EventDonorCreateWithoutDonorInput[] | EventDonorUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: EventDonorCreateOrConnectWithoutDonorInput | EventDonorCreateOrConnectWithoutDonorInput[]
    createMany?: EventDonorCreateManyDonorInputEnvelope
    connect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
  }

  export type EventDonorUncheckedCreateNestedManyWithoutDonorInput = {
    create?: XOR<EventDonorCreateWithoutDonorInput, EventDonorUncheckedCreateWithoutDonorInput> | EventDonorCreateWithoutDonorInput[] | EventDonorUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: EventDonorCreateOrConnectWithoutDonorInput | EventDonorCreateOrConnectWithoutDonorInput[]
    createMany?: EventDonorCreateManyDonorInputEnvelope
    connect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventDonorUpdateManyWithoutDonorNestedInput = {
    create?: XOR<EventDonorCreateWithoutDonorInput, EventDonorUncheckedCreateWithoutDonorInput> | EventDonorCreateWithoutDonorInput[] | EventDonorUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: EventDonorCreateOrConnectWithoutDonorInput | EventDonorCreateOrConnectWithoutDonorInput[]
    upsert?: EventDonorUpsertWithWhereUniqueWithoutDonorInput | EventDonorUpsertWithWhereUniqueWithoutDonorInput[]
    createMany?: EventDonorCreateManyDonorInputEnvelope
    set?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    disconnect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    delete?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    connect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    update?: EventDonorUpdateWithWhereUniqueWithoutDonorInput | EventDonorUpdateWithWhereUniqueWithoutDonorInput[]
    updateMany?: EventDonorUpdateManyWithWhereWithoutDonorInput | EventDonorUpdateManyWithWhereWithoutDonorInput[]
    deleteMany?: EventDonorScalarWhereInput | EventDonorScalarWhereInput[]
  }

  export type EventDonorUncheckedUpdateManyWithoutDonorNestedInput = {
    create?: XOR<EventDonorCreateWithoutDonorInput, EventDonorUncheckedCreateWithoutDonorInput> | EventDonorCreateWithoutDonorInput[] | EventDonorUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: EventDonorCreateOrConnectWithoutDonorInput | EventDonorCreateOrConnectWithoutDonorInput[]
    upsert?: EventDonorUpsertWithWhereUniqueWithoutDonorInput | EventDonorUpsertWithWhereUniqueWithoutDonorInput[]
    createMany?: EventDonorCreateManyDonorInputEnvelope
    set?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    disconnect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    delete?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    connect?: EventDonorWhereUniqueInput | EventDonorWhereUniqueInput[]
    update?: EventDonorUpdateWithWhereUniqueWithoutDonorInput | EventDonorUpdateWithWhereUniqueWithoutDonorInput[]
    updateMany?: EventDonorUpdateManyWithWhereWithoutDonorInput | EventDonorUpdateManyWithWhereWithoutDonorInput[]
    deleteMany?: EventDonorScalarWhereInput | EventDonorScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedEventsInput = {
    create?: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEventsInput
    connect?: UserWhereUniqueInput
  }

  export type EventDonorListCreateNestedManyWithoutEventInput = {
    create?: XOR<EventDonorListCreateWithoutEventInput, EventDonorListUncheckedCreateWithoutEventInput> | EventDonorListCreateWithoutEventInput[] | EventDonorListUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventDonorListCreateOrConnectWithoutEventInput | EventDonorListCreateOrConnectWithoutEventInput[]
    createMany?: EventDonorListCreateManyEventInputEnvelope
    connect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
  }

  export type EventDonorListUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventDonorListCreateWithoutEventInput, EventDonorListUncheckedCreateWithoutEventInput> | EventDonorListCreateWithoutEventInput[] | EventDonorListUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventDonorListCreateOrConnectWithoutEventInput | EventDonorListCreateOrConnectWithoutEventInput[]
    createMany?: EventDonorListCreateManyEventInputEnvelope
    connect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
  }

  export type EnumEventStatusFieldUpdateOperationsInput = {
    set?: $Enums.EventStatus
  }

  export type UserUpdateOneRequiredWithoutCreatedEventsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEventsInput
    upsert?: UserUpsertWithoutCreatedEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedEventsInput, UserUpdateWithoutCreatedEventsInput>, UserUncheckedUpdateWithoutCreatedEventsInput>
  }

  export type EventDonorListUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventDonorListCreateWithoutEventInput, EventDonorListUncheckedCreateWithoutEventInput> | EventDonorListCreateWithoutEventInput[] | EventDonorListUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventDonorListCreateOrConnectWithoutEventInput | EventDonorListCreateOrConnectWithoutEventInput[]
    upsert?: EventDonorListUpsertWithWhereUniqueWithoutEventInput | EventDonorListUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventDonorListCreateManyEventInputEnvelope
    set?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    disconnect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    delete?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    connect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    update?: EventDonorListUpdateWithWhereUniqueWithoutEventInput | EventDonorListUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventDonorListUpdateManyWithWhereWithoutEventInput | EventDonorListUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventDonorListScalarWhereInput | EventDonorListScalarWhereInput[]
  }

  export type EventDonorListUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventDonorListCreateWithoutEventInput, EventDonorListUncheckedCreateWithoutEventInput> | EventDonorListCreateWithoutEventInput[] | EventDonorListUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventDonorListCreateOrConnectWithoutEventInput | EventDonorListCreateOrConnectWithoutEventInput[]
    upsert?: EventDonorListUpsertWithWhereUniqueWithoutEventInput | EventDonorListUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventDonorListCreateManyEventInputEnvelope
    set?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    disconnect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    delete?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    connect?: EventDonorListWhereUniqueInput | EventDonorListWhereUniqueInput[]
    update?: EventDonorListUpdateWithWhereUniqueWithoutEventInput | EventDonorListUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventDonorListUpdateManyWithWhereWithoutEventInput | EventDonorListUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventDonorListScalarWhereInput | EventDonorListScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumReviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[]
    notIn?: $Enums.ReviewStatus[]
    not?: NestedEnumReviewStatusFilter<$PrismaModel> | $Enums.ReviewStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumReviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[]
    notIn?: $Enums.ReviewStatus[]
    not?: NestedEnumReviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewStatusFilter<$PrismaModel>
    _max?: NestedEnumReviewStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDonorStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DonorStatus | EnumDonorStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DonorStatus[]
    notIn?: $Enums.DonorStatus[]
    not?: NestedEnumDonorStatusFilter<$PrismaModel> | $Enums.DonorStatus
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumDonorStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DonorStatus | EnumDonorStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DonorStatus[]
    notIn?: $Enums.DonorStatus[]
    not?: NestedEnumDonorStatusWithAggregatesFilter<$PrismaModel> | $Enums.DonorStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDonorStatusFilter<$PrismaModel>
    _max?: NestedEnumDonorStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[]
    notIn?: $Enums.EventStatus[]
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type NestedEnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[]
    notIn?: $Enums.EventStatus[]
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type EventDonorListCreateWithoutGeneratorInput = {
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutDonorListsInput
    eventDonors?: EventDonorCreateNestedManyWithoutDonorListInput
  }

  export type EventDonorListUncheckedCreateWithoutGeneratorInput = {
    id?: number
    eventId: number
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    eventDonors?: EventDonorUncheckedCreateNestedManyWithoutDonorListInput
  }

  export type EventDonorListCreateOrConnectWithoutGeneratorInput = {
    where: EventDonorListWhereUniqueInput
    create: XOR<EventDonorListCreateWithoutGeneratorInput, EventDonorListUncheckedCreateWithoutGeneratorInput>
  }

  export type EventDonorListCreateManyGeneratorInputEnvelope = {
    data: EventDonorListCreateManyGeneratorInput | EventDonorListCreateManyGeneratorInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutCreatorInput = {
    name: string
    type: string
    date: Date | string
    location: string
    capacity?: number
    focus?: string | null
    criteriaMinGivingLevel?: number
    timelineListGenerationDate?: Date | string | null
    timelineReviewDeadline?: Date | string | null
    timelineInvitationDate?: Date | string | null
    status?: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    donorLists?: EventDonorListCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutCreatorInput = {
    id?: number
    name: string
    type: string
    date: Date | string
    location: string
    capacity?: number
    focus?: string | null
    criteriaMinGivingLevel?: number
    timelineListGenerationDate?: Date | string | null
    timelineReviewDeadline?: Date | string | null
    timelineInvitationDate?: Date | string | null
    status?: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    donorLists?: EventDonorListUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCreatorInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput>
  }

  export type EventCreateManyCreatorInputEnvelope = {
    data: EventCreateManyCreatorInput | EventCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type EventDonorListUpsertWithWhereUniqueWithoutGeneratorInput = {
    where: EventDonorListWhereUniqueInput
    update: XOR<EventDonorListUpdateWithoutGeneratorInput, EventDonorListUncheckedUpdateWithoutGeneratorInput>
    create: XOR<EventDonorListCreateWithoutGeneratorInput, EventDonorListUncheckedCreateWithoutGeneratorInput>
  }

  export type EventDonorListUpdateWithWhereUniqueWithoutGeneratorInput = {
    where: EventDonorListWhereUniqueInput
    data: XOR<EventDonorListUpdateWithoutGeneratorInput, EventDonorListUncheckedUpdateWithoutGeneratorInput>
  }

  export type EventDonorListUpdateManyWithWhereWithoutGeneratorInput = {
    where: EventDonorListScalarWhereInput
    data: XOR<EventDonorListUpdateManyMutationInput, EventDonorListUncheckedUpdateManyWithoutGeneratorInput>
  }

  export type EventDonorListScalarWhereInput = {
    AND?: EventDonorListScalarWhereInput | EventDonorListScalarWhereInput[]
    OR?: EventDonorListScalarWhereInput[]
    NOT?: EventDonorListScalarWhereInput | EventDonorListScalarWhereInput[]
    id?: IntFilter<"EventDonorList"> | number
    eventId?: IntFilter<"EventDonorList"> | number
    name?: StringFilter<"EventDonorList"> | string
    totalDonors?: IntFilter<"EventDonorList"> | number
    approved?: IntFilter<"EventDonorList"> | number
    excluded?: IntFilter<"EventDonorList"> | number
    pending?: IntFilter<"EventDonorList"> | number
    autoExcluded?: IntFilter<"EventDonorList"> | number
    reviewStatus?: EnumReviewStatusFilter<"EventDonorList"> | $Enums.ReviewStatus
    createdAt?: DateTimeFilter<"EventDonorList"> | Date | string
    updatedAt?: DateTimeFilter<"EventDonorList"> | Date | string
    generatedBy?: IntFilter<"EventDonorList"> | number
  }

  export type EventUpsertWithWhereUniqueWithoutCreatorInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutCreatorInput, EventUncheckedUpdateWithoutCreatorInput>
    create: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput>
  }

  export type EventUpdateWithWhereUniqueWithoutCreatorInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutCreatorInput, EventUncheckedUpdateWithoutCreatorInput>
  }

  export type EventUpdateManyWithWhereWithoutCreatorInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutCreatorInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    type?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    location?: StringFilter<"Event"> | string
    capacity?: IntFilter<"Event"> | number
    focus?: StringNullableFilter<"Event"> | string | null
    criteriaMinGivingLevel?: FloatFilter<"Event"> | number
    timelineListGenerationDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    timelineReviewDeadline?: DateTimeNullableFilter<"Event"> | Date | string | null
    timelineInvitationDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    createdBy?: IntFilter<"Event"> | number
  }

  export type EventCreateWithoutDonorListsInput = {
    name: string
    type: string
    date: Date | string
    location: string
    capacity?: number
    focus?: string | null
    criteriaMinGivingLevel?: number
    timelineListGenerationDate?: Date | string | null
    timelineReviewDeadline?: Date | string | null
    timelineInvitationDate?: Date | string | null
    status?: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedEventsInput
  }

  export type EventUncheckedCreateWithoutDonorListsInput = {
    id?: number
    name: string
    type: string
    date: Date | string
    location: string
    capacity?: number
    focus?: string | null
    criteriaMinGivingLevel?: number
    timelineListGenerationDate?: Date | string | null
    timelineReviewDeadline?: Date | string | null
    timelineInvitationDate?: Date | string | null
    status?: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
  }

  export type EventCreateOrConnectWithoutDonorListsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutDonorListsInput, EventUncheckedCreateWithoutDonorListsInput>
  }

  export type UserCreateWithoutGeneratedListsInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutGeneratedListsInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutGeneratedListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGeneratedListsInput, UserUncheckedCreateWithoutGeneratedListsInput>
  }

  export type EventDonorCreateWithoutDonorListInput = {
    status: $Enums.DonorStatus
    excludeReason?: string | null
    reviewerId?: number | null
    reviewDate?: Date | string | null
    comments?: string | null
    autoExcluded?: boolean
    donor: DonorCreateNestedOneWithoutEventDonorsInput
  }

  export type EventDonorUncheckedCreateWithoutDonorListInput = {
    id?: number
    donorId: number
    status: $Enums.DonorStatus
    excludeReason?: string | null
    reviewerId?: number | null
    reviewDate?: Date | string | null
    comments?: string | null
    autoExcluded?: boolean
  }

  export type EventDonorCreateOrConnectWithoutDonorListInput = {
    where: EventDonorWhereUniqueInput
    create: XOR<EventDonorCreateWithoutDonorListInput, EventDonorUncheckedCreateWithoutDonorListInput>
  }

  export type EventDonorCreateManyDonorListInputEnvelope = {
    data: EventDonorCreateManyDonorListInput | EventDonorCreateManyDonorListInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutDonorListsInput = {
    update: XOR<EventUpdateWithoutDonorListsInput, EventUncheckedUpdateWithoutDonorListsInput>
    create: XOR<EventCreateWithoutDonorListsInput, EventUncheckedCreateWithoutDonorListsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutDonorListsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutDonorListsInput, EventUncheckedUpdateWithoutDonorListsInput>
  }

  export type EventUpdateWithoutDonorListsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    focus?: NullableStringFieldUpdateOperationsInput | string | null
    criteriaMinGivingLevel?: FloatFieldUpdateOperationsInput | number
    timelineListGenerationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineReviewDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineInvitationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutDonorListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    focus?: NullableStringFieldUpdateOperationsInput | string | null
    criteriaMinGivingLevel?: FloatFieldUpdateOperationsInput | number
    timelineListGenerationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineReviewDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineInvitationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutGeneratedListsInput = {
    update: XOR<UserUpdateWithoutGeneratedListsInput, UserUncheckedUpdateWithoutGeneratedListsInput>
    create: XOR<UserCreateWithoutGeneratedListsInput, UserUncheckedCreateWithoutGeneratedListsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGeneratedListsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGeneratedListsInput, UserUncheckedUpdateWithoutGeneratedListsInput>
  }

  export type UserUpdateWithoutGeneratedListsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutGeneratedListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type EventDonorUpsertWithWhereUniqueWithoutDonorListInput = {
    where: EventDonorWhereUniqueInput
    update: XOR<EventDonorUpdateWithoutDonorListInput, EventDonorUncheckedUpdateWithoutDonorListInput>
    create: XOR<EventDonorCreateWithoutDonorListInput, EventDonorUncheckedCreateWithoutDonorListInput>
  }

  export type EventDonorUpdateWithWhereUniqueWithoutDonorListInput = {
    where: EventDonorWhereUniqueInput
    data: XOR<EventDonorUpdateWithoutDonorListInput, EventDonorUncheckedUpdateWithoutDonorListInput>
  }

  export type EventDonorUpdateManyWithWhereWithoutDonorListInput = {
    where: EventDonorScalarWhereInput
    data: XOR<EventDonorUpdateManyMutationInput, EventDonorUncheckedUpdateManyWithoutDonorListInput>
  }

  export type EventDonorScalarWhereInput = {
    AND?: EventDonorScalarWhereInput | EventDonorScalarWhereInput[]
    OR?: EventDonorScalarWhereInput[]
    NOT?: EventDonorScalarWhereInput | EventDonorScalarWhereInput[]
    id?: IntFilter<"EventDonor"> | number
    donorListId?: IntFilter<"EventDonor"> | number
    donorId?: IntFilter<"EventDonor"> | number
    status?: EnumDonorStatusFilter<"EventDonor"> | $Enums.DonorStatus
    excludeReason?: StringNullableFilter<"EventDonor"> | string | null
    reviewerId?: IntNullableFilter<"EventDonor"> | number | null
    reviewDate?: DateTimeNullableFilter<"EventDonor"> | Date | string | null
    comments?: StringNullableFilter<"EventDonor"> | string | null
    autoExcluded?: BoolFilter<"EventDonor"> | boolean
  }

  export type EventDonorListCreateWithoutEventDonorsInput = {
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutDonorListsInput
    generator: UserCreateNestedOneWithoutGeneratedListsInput
  }

  export type EventDonorListUncheckedCreateWithoutEventDonorsInput = {
    id?: number
    eventId: number
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    generatedBy: number
  }

  export type EventDonorListCreateOrConnectWithoutEventDonorsInput = {
    where: EventDonorListWhereUniqueInput
    create: XOR<EventDonorListCreateWithoutEventDonorsInput, EventDonorListUncheckedCreateWithoutEventDonorsInput>
  }

  export type DonorCreateWithoutEventDonorsInput = {
    pmm?: string | null
    smm?: string | null
    vmm?: string | null
    excluded?: boolean
    deceased?: boolean
    firstName?: string | null
    nickName?: string | null
    lastName?: string | null
    organizationName?: string | null
    totalDonations?: number
    totalPledges?: number
    largestGift?: number
    largestGiftAppeal?: string | null
    firstGiftDate?: Date | string | null
    lastGiftDate?: Date | string | null
    lastGiftAmount?: number
    lastGiftRequest?: string | null
    lastGiftAppeal?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    city?: string | null
    contactPhoneType?: string | null
    phoneRestrictions?: string | null
    emailRestrictions?: string | null
    communicationRestrictions?: string | null
    subscriptionEventsInPerson?: string | null
    subscriptionEventsMagazine?: string | null
    communicationPreference?: string | null
    tags?: string | null
  }

  export type DonorUncheckedCreateWithoutEventDonorsInput = {
    id?: number
    pmm?: string | null
    smm?: string | null
    vmm?: string | null
    excluded?: boolean
    deceased?: boolean
    firstName?: string | null
    nickName?: string | null
    lastName?: string | null
    organizationName?: string | null
    totalDonations?: number
    totalPledges?: number
    largestGift?: number
    largestGiftAppeal?: string | null
    firstGiftDate?: Date | string | null
    lastGiftDate?: Date | string | null
    lastGiftAmount?: number
    lastGiftRequest?: string | null
    lastGiftAppeal?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    city?: string | null
    contactPhoneType?: string | null
    phoneRestrictions?: string | null
    emailRestrictions?: string | null
    communicationRestrictions?: string | null
    subscriptionEventsInPerson?: string | null
    subscriptionEventsMagazine?: string | null
    communicationPreference?: string | null
    tags?: string | null
  }

  export type DonorCreateOrConnectWithoutEventDonorsInput = {
    where: DonorWhereUniqueInput
    create: XOR<DonorCreateWithoutEventDonorsInput, DonorUncheckedCreateWithoutEventDonorsInput>
  }

  export type EventDonorListUpsertWithoutEventDonorsInput = {
    update: XOR<EventDonorListUpdateWithoutEventDonorsInput, EventDonorListUncheckedUpdateWithoutEventDonorsInput>
    create: XOR<EventDonorListCreateWithoutEventDonorsInput, EventDonorListUncheckedCreateWithoutEventDonorsInput>
    where?: EventDonorListWhereInput
  }

  export type EventDonorListUpdateToOneWithWhereWithoutEventDonorsInput = {
    where?: EventDonorListWhereInput
    data: XOR<EventDonorListUpdateWithoutEventDonorsInput, EventDonorListUncheckedUpdateWithoutEventDonorsInput>
  }

  export type EventDonorListUpdateWithoutEventDonorsInput = {
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutDonorListsNestedInput
    generator?: UserUpdateOneRequiredWithoutGeneratedListsNestedInput
  }

  export type EventDonorListUncheckedUpdateWithoutEventDonorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: IntFieldUpdateOperationsInput | number
  }

  export type DonorUpsertWithoutEventDonorsInput = {
    update: XOR<DonorUpdateWithoutEventDonorsInput, DonorUncheckedUpdateWithoutEventDonorsInput>
    create: XOR<DonorCreateWithoutEventDonorsInput, DonorUncheckedCreateWithoutEventDonorsInput>
    where?: DonorWhereInput
  }

  export type DonorUpdateToOneWithWhereWithoutEventDonorsInput = {
    where?: DonorWhereInput
    data: XOR<DonorUpdateWithoutEventDonorsInput, DonorUncheckedUpdateWithoutEventDonorsInput>
  }

  export type DonorUpdateWithoutEventDonorsInput = {
    pmm?: NullableStringFieldUpdateOperationsInput | string | null
    smm?: NullableStringFieldUpdateOperationsInput | string | null
    vmm?: NullableStringFieldUpdateOperationsInput | string | null
    excluded?: BoolFieldUpdateOperationsInput | boolean
    deceased?: BoolFieldUpdateOperationsInput | boolean
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    nickName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    totalDonations?: FloatFieldUpdateOperationsInput | number
    totalPledges?: FloatFieldUpdateOperationsInput | number
    largestGift?: FloatFieldUpdateOperationsInput | number
    largestGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    firstGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftAmount?: FloatFieldUpdateOperationsInput | number
    lastGiftRequest?: NullableStringFieldUpdateOperationsInput | string | null
    lastGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhoneType?: NullableStringFieldUpdateOperationsInput | string | null
    phoneRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    emailRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    communicationRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsInPerson?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsMagazine?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreference?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DonorUncheckedUpdateWithoutEventDonorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    pmm?: NullableStringFieldUpdateOperationsInput | string | null
    smm?: NullableStringFieldUpdateOperationsInput | string | null
    vmm?: NullableStringFieldUpdateOperationsInput | string | null
    excluded?: BoolFieldUpdateOperationsInput | boolean
    deceased?: BoolFieldUpdateOperationsInput | boolean
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    nickName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    totalDonations?: FloatFieldUpdateOperationsInput | number
    totalPledges?: FloatFieldUpdateOperationsInput | number
    largestGift?: FloatFieldUpdateOperationsInput | number
    largestGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    firstGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastGiftAmount?: FloatFieldUpdateOperationsInput | number
    lastGiftRequest?: NullableStringFieldUpdateOperationsInput | string | null
    lastGiftAppeal?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhoneType?: NullableStringFieldUpdateOperationsInput | string | null
    phoneRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    emailRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    communicationRestrictions?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsInPerson?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionEventsMagazine?: NullableStringFieldUpdateOperationsInput | string | null
    communicationPreference?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventDonorCreateWithoutDonorInput = {
    status: $Enums.DonorStatus
    excludeReason?: string | null
    reviewerId?: number | null
    reviewDate?: Date | string | null
    comments?: string | null
    autoExcluded?: boolean
    donorList: EventDonorListCreateNestedOneWithoutEventDonorsInput
  }

  export type EventDonorUncheckedCreateWithoutDonorInput = {
    id?: number
    donorListId: number
    status: $Enums.DonorStatus
    excludeReason?: string | null
    reviewerId?: number | null
    reviewDate?: Date | string | null
    comments?: string | null
    autoExcluded?: boolean
  }

  export type EventDonorCreateOrConnectWithoutDonorInput = {
    where: EventDonorWhereUniqueInput
    create: XOR<EventDonorCreateWithoutDonorInput, EventDonorUncheckedCreateWithoutDonorInput>
  }

  export type EventDonorCreateManyDonorInputEnvelope = {
    data: EventDonorCreateManyDonorInput | EventDonorCreateManyDonorInput[]
    skipDuplicates?: boolean
  }

  export type EventDonorUpsertWithWhereUniqueWithoutDonorInput = {
    where: EventDonorWhereUniqueInput
    update: XOR<EventDonorUpdateWithoutDonorInput, EventDonorUncheckedUpdateWithoutDonorInput>
    create: XOR<EventDonorCreateWithoutDonorInput, EventDonorUncheckedCreateWithoutDonorInput>
  }

  export type EventDonorUpdateWithWhereUniqueWithoutDonorInput = {
    where: EventDonorWhereUniqueInput
    data: XOR<EventDonorUpdateWithoutDonorInput, EventDonorUncheckedUpdateWithoutDonorInput>
  }

  export type EventDonorUpdateManyWithWhereWithoutDonorInput = {
    where: EventDonorScalarWhereInput
    data: XOR<EventDonorUpdateManyMutationInput, EventDonorUncheckedUpdateManyWithoutDonorInput>
  }

  export type UserCreateWithoutCreatedEventsInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    generatedLists?: EventDonorListCreateNestedManyWithoutGeneratorInput
  }

  export type UserUncheckedCreateWithoutCreatedEventsInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    generatedLists?: EventDonorListUncheckedCreateNestedManyWithoutGeneratorInput
  }

  export type UserCreateOrConnectWithoutCreatedEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
  }

  export type EventDonorListCreateWithoutEventInput = {
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    generator: UserCreateNestedOneWithoutGeneratedListsInput
    eventDonors?: EventDonorCreateNestedManyWithoutDonorListInput
  }

  export type EventDonorListUncheckedCreateWithoutEventInput = {
    id?: number
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    generatedBy: number
    eventDonors?: EventDonorUncheckedCreateNestedManyWithoutDonorListInput
  }

  export type EventDonorListCreateOrConnectWithoutEventInput = {
    where: EventDonorListWhereUniqueInput
    create: XOR<EventDonorListCreateWithoutEventInput, EventDonorListUncheckedCreateWithoutEventInput>
  }

  export type EventDonorListCreateManyEventInputEnvelope = {
    data: EventDonorListCreateManyEventInput | EventDonorListCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedEventsInput = {
    update: XOR<UserUpdateWithoutCreatedEventsInput, UserUncheckedUpdateWithoutCreatedEventsInput>
    create: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedEventsInput, UserUncheckedUpdateWithoutCreatedEventsInput>
  }

  export type UserUpdateWithoutCreatedEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    generatedLists?: EventDonorListUpdateManyWithoutGeneratorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    generatedLists?: EventDonorListUncheckedUpdateManyWithoutGeneratorNestedInput
  }

  export type EventDonorListUpsertWithWhereUniqueWithoutEventInput = {
    where: EventDonorListWhereUniqueInput
    update: XOR<EventDonorListUpdateWithoutEventInput, EventDonorListUncheckedUpdateWithoutEventInput>
    create: XOR<EventDonorListCreateWithoutEventInput, EventDonorListUncheckedCreateWithoutEventInput>
  }

  export type EventDonorListUpdateWithWhereUniqueWithoutEventInput = {
    where: EventDonorListWhereUniqueInput
    data: XOR<EventDonorListUpdateWithoutEventInput, EventDonorListUncheckedUpdateWithoutEventInput>
  }

  export type EventDonorListUpdateManyWithWhereWithoutEventInput = {
    where: EventDonorListScalarWhereInput
    data: XOR<EventDonorListUpdateManyMutationInput, EventDonorListUncheckedUpdateManyWithoutEventInput>
  }

  export type EventDonorListCreateManyGeneratorInput = {
    id?: number
    eventId: number
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateManyCreatorInput = {
    id?: number
    name: string
    type: string
    date: Date | string
    location: string
    capacity?: number
    focus?: string | null
    criteriaMinGivingLevel?: number
    timelineListGenerationDate?: Date | string | null
    timelineReviewDeadline?: Date | string | null
    timelineInvitationDate?: Date | string | null
    status?: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventDonorListUpdateWithoutGeneratorInput = {
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutDonorListsNestedInput
    eventDonors?: EventDonorUpdateManyWithoutDonorListNestedInput
  }

  export type EventDonorListUncheckedUpdateWithoutGeneratorInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventDonors?: EventDonorUncheckedUpdateManyWithoutDonorListNestedInput
  }

  export type EventDonorListUncheckedUpdateManyWithoutGeneratorInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutCreatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    focus?: NullableStringFieldUpdateOperationsInput | string | null
    criteriaMinGivingLevel?: FloatFieldUpdateOperationsInput | number
    timelineListGenerationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineReviewDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineInvitationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    donorLists?: EventDonorListUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    focus?: NullableStringFieldUpdateOperationsInput | string | null
    criteriaMinGivingLevel?: FloatFieldUpdateOperationsInput | number
    timelineListGenerationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineReviewDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineInvitationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    donorLists?: EventDonorListUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    focus?: NullableStringFieldUpdateOperationsInput | string | null
    criteriaMinGivingLevel?: FloatFieldUpdateOperationsInput | number
    timelineListGenerationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineReviewDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timelineInvitationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventDonorCreateManyDonorListInput = {
    id?: number
    donorId: number
    status: $Enums.DonorStatus
    excludeReason?: string | null
    reviewerId?: number | null
    reviewDate?: Date | string | null
    comments?: string | null
    autoExcluded?: boolean
  }

  export type EventDonorUpdateWithoutDonorListInput = {
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
    donor?: DonorUpdateOneRequiredWithoutEventDonorsNestedInput
  }

  export type EventDonorUncheckedUpdateWithoutDonorListInput = {
    id?: IntFieldUpdateOperationsInput | number
    donorId?: IntFieldUpdateOperationsInput | number
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventDonorUncheckedUpdateManyWithoutDonorListInput = {
    id?: IntFieldUpdateOperationsInput | number
    donorId?: IntFieldUpdateOperationsInput | number
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventDonorCreateManyDonorInput = {
    id?: number
    donorListId: number
    status: $Enums.DonorStatus
    excludeReason?: string | null
    reviewerId?: number | null
    reviewDate?: Date | string | null
    comments?: string | null
    autoExcluded?: boolean
  }

  export type EventDonorUpdateWithoutDonorInput = {
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
    donorList?: EventDonorListUpdateOneRequiredWithoutEventDonorsNestedInput
  }

  export type EventDonorUncheckedUpdateWithoutDonorInput = {
    id?: IntFieldUpdateOperationsInput | number
    donorListId?: IntFieldUpdateOperationsInput | number
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventDonorUncheckedUpdateManyWithoutDonorInput = {
    id?: IntFieldUpdateOperationsInput | number
    donorListId?: IntFieldUpdateOperationsInput | number
    status?: EnumDonorStatusFieldUpdateOperationsInput | $Enums.DonorStatus
    excludeReason?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableIntFieldUpdateOperationsInput | number | null
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    autoExcluded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventDonorListCreateManyEventInput = {
    id?: number
    name: string
    totalDonors?: number
    approved?: number
    excluded?: number
    pending?: number
    autoExcluded?: number
    reviewStatus?: $Enums.ReviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    generatedBy: number
  }

  export type EventDonorListUpdateWithoutEventInput = {
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generator?: UserUpdateOneRequiredWithoutGeneratedListsNestedInput
    eventDonors?: EventDonorUpdateManyWithoutDonorListNestedInput
  }

  export type EventDonorListUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: IntFieldUpdateOperationsInput | number
    eventDonors?: EventDonorUncheckedUpdateManyWithoutDonorListNestedInput
  }

  export type EventDonorListUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    totalDonors?: IntFieldUpdateOperationsInput | number
    approved?: IntFieldUpdateOperationsInput | number
    excluded?: IntFieldUpdateOperationsInput | number
    pending?: IntFieldUpdateOperationsInput | number
    autoExcluded?: IntFieldUpdateOperationsInput | number
    reviewStatus?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDonorListCountOutputTypeDefaultArgs instead
     */
    export type EventDonorListCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDonorListCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DonorCountOutputTypeDefaultArgs instead
     */
    export type DonorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DonorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDonorListDefaultArgs instead
     */
    export type EventDonorListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDonorListDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDonorDefaultArgs instead
     */
    export type EventDonorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDonorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DonorDefaultArgs instead
     */
    export type DonorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DonorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}