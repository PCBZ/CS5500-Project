
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role'
};

exports.Prisma.EventDonorListScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  name: 'name',
  totalDonors: 'totalDonors',
  approved: 'approved',
  excluded: 'excluded',
  pending: 'pending',
  autoExcluded: 'autoExcluded',
  reviewStatus: 'reviewStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  generatedBy: 'generatedBy'
};

exports.Prisma.EventDonorScalarFieldEnum = {
  id: 'id',
  donorListId: 'donorListId',
  donorId: 'donorId',
  status: 'status',
  excludeReason: 'excludeReason',
  reviewerId: 'reviewerId',
  reviewDate: 'reviewDate',
  comments: 'comments',
  autoExcluded: 'autoExcluded'
};

exports.Prisma.DonorScalarFieldEnum = {
  id: 'id',
  pmm: 'pmm',
  smm: 'smm',
  vmm: 'vmm',
  excluded: 'excluded',
  deceased: 'deceased',
  firstName: 'firstName',
  nickName: 'nickName',
  lastName: 'lastName',
  organizationName: 'organizationName',
  totalDonations: 'totalDonations',
  totalPledges: 'totalPledges',
  largestGift: 'largestGift',
  largestGiftAppeal: 'largestGiftAppeal',
  firstGiftDate: 'firstGiftDate',
  lastGiftDate: 'lastGiftDate',
  lastGiftAmount: 'lastGiftAmount',
  lastGiftRequest: 'lastGiftRequest',
  lastGiftAppeal: 'lastGiftAppeal',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  contactPhoneType: 'contactPhoneType',
  phoneRestrictions: 'phoneRestrictions',
  emailRestrictions: 'emailRestrictions',
  communicationRestrictions: 'communicationRestrictions',
  subscriptionEventsInPerson: 'subscriptionEventsInPerson',
  subscriptionEventsMagazine: 'subscriptionEventsMagazine',
  communicationPreference: 'communicationPreference',
  tags: 'tags'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  date: 'date',
  location: 'location',
  capacity: 'capacity',
  focus: 'focus',
  criteriaMinGivingLevel: 'criteriaMinGivingLevel',
  timelineListGenerationDate: 'timelineListGenerationDate',
  timelineReviewDeadline: 'timelineReviewDeadline',
  timelineInvitationDate: 'timelineInvitationDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  pmm: 'pmm',
  smm: 'smm',
  vmm: 'vmm'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  completed: 'completed',
  pending: 'pending'
};

exports.DonorStatus = exports.$Enums.DonorStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Excluded: 'Excluded',
  AutoExcluded: 'AutoExcluded'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  Planning: 'Planning',
  ListGeneration: 'ListGeneration',
  Review: 'Review',
  Ready: 'Ready',
  Complete: 'Complete'
};

exports.Prisma.ModelName = {
  User: 'User',
  EventDonorList: 'EventDonorList',
  EventDonor: 'EventDonor',
  Donor: 'Donor',
  Event: 'Event'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
